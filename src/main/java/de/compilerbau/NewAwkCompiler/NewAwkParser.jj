options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(NewAwkParser)

package de.compilerbau.NewAwkCompiler.generated;

import java.util.*;
import java.io.*;
import de.compilerbau.NewAwkCompiler.generated.Token;


public class NewAwkParser {
 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTest.txt");
     FileInputStream is = new FileInputStream(file);
     NewAwkParser parser = new NewAwkParser(new BufferedInputStream(is));
        parser.Start();
     }
}
PARSER_END(NewAwkParser)
SKIP : {
<Whitespace: " ">
| <Tab: "\t">
| <Newline: "\n">
| <CarriageReturn: "\r">
}
TOKEN : {
<#Alphabet: ["a"-"z","A"-"Z"]>
| <#Digit: ["0"-"9"]>
| <#Expo: ["e","E"]("+"|"-")?(<Digit>)+>
| <Bezeichner: <Alphabet>(<Digit>|<Alphabet>)*>
| <Datentyp: ("int"|"double"|"char"|"boolean"|"String")>
| <Schluesselwort: ("if"|"else"|"while"|"do"|"return"|"void"|"break"|"switch"|"case"|"for")>
| <TypKonverter: "!">
| <KlammerAuf: "(">
| <KlammerZu: ")">
| <IntegerLiteral: (<Digit>)+>
| <DoubleLiteral: ((<Digit>)+"."(<Digit>)*(<Expo>)?)
| ((<Digit>)*"."(<Digit>)+(<Expo>)?)>
| <PlusSymbol: "+">
| <MinusSymbol: "-">
| <Multiplikation: "*">
| <Division: "/">
| <ModuloOperator: "%">
| <Exponentiation: "^">
| <Boolean: ("true"|"false")>
| <Equal: "==">
| <NotEqual: "!=">
| <GreaterOrEqual: ">=">
| <SmallerOrEqual: "<=">
| <Greater: ">">
| <Smaller: "<">
| <Semicolon: ";">
| <Zuweisung: "=">
| <NAME: (["a"-"z", "A"-"Z"])+>
}

void Start() :
{}
{
    <IntegerLiteral>
    (
        <PlusSymbol>
        <IntegerLiteral>
    )*
    <EOF>
}
