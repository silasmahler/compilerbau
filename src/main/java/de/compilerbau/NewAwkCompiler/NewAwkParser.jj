options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(NewAwkParser)

package de.compilerbau.NewAwkCompiler.generated;

import java.util.*;
import java.io.*;
import de.compilerbau.NewAwkCompiler.generated.Token;


public class NewAwkParser {
 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     /*File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTestAddNumbers.txt");
     FileInputStream is = new FileInputStream(file);
     NewAwkParser parser = new NewAwkParser(new BufferedInputStream(is));
     parser.Start();*/

     File file2 = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTest.txt");
     FileInputStream is2 = new FileInputStream(file2);
     NewAwkParser parser2 = new NewAwkParser(new BufferedInputStream(is2));
     parser2.program();

     }
}
PARSER_END(NewAwkParser)
SKIP :
{ <WHITESPACE: " ">
| <TAB: "\t">
| <NEW_LINE: "\n">
| <CARRIAGE_RETURN: "\r">
}
TOKEN : /* OPERATORS */
{ <PLUS: "+">
| <MINUS: "-">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <MODULO: "%">
| <Zuweisung: "=">
| <EQUAL: "==">
| <NOT_EQUAL: "!=">
| <G_OR_EQUAL: ">=">
| <S_OR_EQUAL: "<=">
| <GREATER: ">">
| <SMALLER: "<">
| <Colon: ":">
| <ConditionalAnd: "&&">
| <ConditionalOr: "||">
| <ConditionalNot: "!">
| <Exponentiation: "^">
}
TOKEN : /* KEYWORDS */
{ <RETURN : "return">
}
TOKEN : /* SEPARATORS */
{ <KlammerAuf: "(">
| <KlammerZu: ")">
| <BlockAuf: "{">
| <BlockZu: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
}
TOKEN : /* BASIC */
{ <#LETTER: ["_","a"-"z","A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#EXPO: ["e","E"]("+"|"-")?(<DIGIT>)+>
| <Type: <ArrayType> | <Datatype> >
| <ArrayType: <Datatype> <LBRACKET> <RBRACKET>>
| <Datatype: ("int"|"double"|"char"|"boolean"|"String")>
| <Apostrophe: "'">
| <BooleanConditionalAnd: <BooleanExpression><ConditionalAnd><BooleanExpression>
                          (<ConditionalAnd><BooleanExpression> )* >
| <BooleanConditionalOr: <BooleanExpression><ConditionalOr><BooleanExpression>
                          (<ConditionalOr><BooleanExpression> )* >
| <BooleanConditionalNot: (<ConditionalNot><BooleanExpression>)>

}
TOKEN : /* LITERALS */
{ <CharLiteral: <Apostrophe> (<LETTER> | <DIGIT>) <Apostrophe>>
| <IntegerLiteral: (<DIGIT>)+>
| <DoubleLiteral: ((<DIGIT>)+<DOT>(<DIGIT>)*(<EXPO>)?) | ((<DIGIT>)*<DOT> (<DIGIT>)+(<EXPO> )?)>
| <VOID: "void">
| <NullLiteral: "null">
| <Bezeichner: <LETTER>(<DIGIT>|<LETTER>)*>
| <StringLiteral: "\"" <STRING_CONTENT> "\"">
| <#STRING_CONTENT: (<LETTER>|<DIGIT>)* >
| <BooleanExpression: (<TRUE>|<FALSE>)>
| <#TRUE: "true">
| <#FALSE: "false">
}
void program() : {}
{
    { System.out.println("ENTER: program()"); }
    (method() | fieldDeclaration())*
    { System.out.println("LEAVE: program()"); }

}
void returnStatement(): {}
{
    { System.out.println("ENTER: returnStatement()"); }
    <RETURN>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral>
    | <BooleanExpression> | <StringLiteral> | <NullLiteral> ) <SEMICOLON>
}
void comparision():
{}
{
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanExpression> | <StringLiteral> | <NullLiteral> )
    condOperator()
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanExpression> | <StringLiteral> | <NullLiteral> )
}
void condOperator():
{}
{
  (<EQUAL> | <NOT_EQUAL> | <SMALLER> | <S_OR_EQUAL> | <GREATER> | <G_OR_EQUAL>)
}
void method() : {}
{
    { System.out.println("ENTER: method()"); }
    methodSignature()
    methodBody()
}
void methodCall() : {}
{
    <Bezeichner><KlammerAuf><KlammerZu>
}
void methodBody() : {}
{
    { System.out.println("ENTER: methodBody()"); }
    <BlockAuf> (fieldDeclaration() | methodCall() | returnStatement())+ <BlockZu>
}
void methodSignature() : {}
{
    { System.out.println("ENTER: methodSignature()"); }
    (<Type> | <VOID> ) <Bezeichner> <KlammerAuf> parameterListe() <KlammerZu>
}

void fieldDeclaration() : {}
{
    <Type> <Bezeichner> <Zuweisung>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanExpression> | <StringLiteral> | <NullLiteral> )
}
void parameterListe() : {}
{
    <Type> <Bezeichner> (<COMMA> <Type> <Bezeichner>)*
}
SimpleNode value() #Value : {}
{
(jsonObject() | array() | <STRING> | <NUMBER> | booleanValue())
{ return jjtThis; }
}
void booleanValue(): {}
{
(<BooleanExpression>)
}


void intDoubleCharOperation() :
{}
{
    (<IntegerLiteral> | <DoubleLiteral> | <CharLiteral>)
    (<PLUS> | <MINUS> | <MULTIPLICATION> | <DIVISION> | <MODULO> )
    (<IntegerLiteral> | <DoubleLiteral> | <CharLiteral>)
}
void adderSubstracter() :
{}
{
    <IntegerLiteral> (<PLUS> <IntegerLiteral>)* (<MINUS> <IntegerLiteral>)* <EOF>
}
