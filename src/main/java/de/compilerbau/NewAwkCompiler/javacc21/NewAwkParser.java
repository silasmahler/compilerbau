/* Generated by: JavaCC 21 Parser Generator. NewAwkParser.java */
package de.compilerbau.NewAwkCompiler.javacc21;

import java.util.*;
import java.util.concurrent.CancellationException;
import java.util.logging.*;
import java.io.*;
import static de.compilerbau.NewAwkCompiler.javacc21.NewAwkConstants.TokenType.*;
import de.compilerbau.NewAwkCompiler.Visitors.NewAwkTypeCheckVisitor;
import de.compilerbau.NewAwkCompiler.Visitors.NewAwkDumpVisitor;
import de.compilerbau.NewAwkCompiler.javacc21.*;
@SuppressWarnings("unused")
public class NewAwkParser implements NewAwkConstants {
    static public ArrayList<Node> roots= new ArrayList<> ();
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        System.err.println("Arguments: "+args.length);
        for (String s : args) {
            System.err.println("Arg: "+s);
        }
        List<File> failures= new ArrayList<File> ();
        List<File> successes= new ArrayList<File> ();
        boolean failureOccurred= false;
        NewAwkParser parser;
        if (args.length== 0) {
            usage();
        }
        List<File> files= new ArrayList<File> ();
        for (String arg : args) {
            File file= new File(arg);
            if (!file.exists()) {
                System.err.println("File "+file+" does not exist.");
                continue;
            }
            addFilesRecursively(files, file);
        }
        long startTime= System.currentTimeMillis();
        for (File file : files) {
            try {
                // A bit screwball, we'll dump the tree if there is only one arg. :-)
                parseFile(file, files.size()>=1);
            }
            catch(Exception e) {
                System.err.println("Error processing file: "+file);
                e.printStackTrace();
                failures.add(file);
                continue;
            }
            System.out.println(file.getName()+" parsed successfully.");
            successes.add(file);
        }
        for (File file : failures) {
            System.out.println("Parse failed on: "+file);
        }
        System.out.println("\nParsed "+successes.size()+" files successfully");
        System.out.println("Failed on "+failures.size()+" files.");
        System.out.println("\nDuration: "+(System.currentTimeMillis()-startTime)+" milliseconds");
    }

    static public void parseFile(File file, boolean dumpTree) throws IOException, ParseException {
        FileReader fr= new FileReader(file);
        NewAwkParser parser= new NewAwkParser(fr);
        parser.setInputSource(file.toString());
        Node root= parser.CompilationUnit();
        // Uncomment the following code if you want all the parsed trees
        //  to remain in memory. This is useful if you want to know how much
        //  memory it takes to parse all the source code in the JDK, for example.
        //  (About 8GB if we're talking about JDK 13)
        //       roots.add(root);
        //       if (roots.size() % 1000 == 0) {
        //            System.out.println("-----------------------------------------------");
        //            System.out.println("Parsed "  +  roots.size() + " files.");
        //            System.out.println("-----------------------------------------------");
        //       }
        if (dumpTree) {
            Nodes.dump(root, ">");
            NewAwkDumpVisitor newAwkDumpVisitor= new NewAwkDumpVisitor();
            NewAwkTypeCheckVisitor newAwkTypeCheckVisitor= new NewAwkTypeCheckVisitor();
            if (root instanceof CompilationUnit) {
                System.out.println("Entering Visitors...");
                //((CompilationUnit) root).jjtAccept(newAwkDumpVisitor, null);
                ((CompilationUnit) root).jjtAccept(newAwkTypeCheckVisitor, null);
            }
        }
    }

    static public void addFilesRecursively(List<File> files, File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) {
                addFilesRecursively(files, f);
            }
        }
        else if (file.getName().endsWith("java")&&!file.getName().endsWith("-info.java")||file.getName().endsWith("txt")&&!file.getName().endsWith("-info.java")) {
            files.add(file);
        }
    }

    static public void usage() {
        System.out.println("Usage: java JParse <sourcefiles or directories>");
        System.out.println("If you just pass it one java source file, it dumps the AST");
        System.exit(-1);
    }

    private static final java.util.logging.Logger LOGGER= Logger.getLogger(NewAwkParser.class.getName());
    public static void setLogLevel(Level level) {
        LOGGER.setLevel(level);
        Logger.getGlobal().getParent().getHandlers()[0].setLevel(level);
    }

    // The last token successfully "consumed"     
    Token currentToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private TokenType upToTokenType;
    private EnumSet<TokenType> upToFirstSet;
    private boolean stopAtScanLimit;
    private Token lastParsedToken;
    //private Token nextToken; //REVISIT
    //private EnumSet<Token> currentFollowSet;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public NewAwkLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public NewAwkParser(String inputSource, CharSequence content) {
        this(new NewAwkLexer(inputSource, content));
    }

    public NewAwkParser(CharSequence content) {
        this("input", content);
    }

    public NewAwkParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    public NewAwkParser(Reader reader) {
        this(new NewAwkLexer(reader));
    }

    /** Constructor with user supplied Lexer. */
    public NewAwkParser(NewAwkLexer lexer) {
        token_source= lexer;
        currentToken= new Token();
    }

    final public Token getNextToken() {
        if (currentToken.getNext()!=null) currentToken= currentToken.getNext();
        else {
            Token nextToken= token_source.getNextToken();
            currentToken.setNext(nextToken);
            currentToken= nextToken;
        }
        return currentToken;
    }

    /** Get the specific Token index ahead in the stream. */
    final public Token getToken(int index) {
        Token t= currentToken;
        for (int i= 0; i<index; i++) {
            if (t.getNext()!=null) t= t.getNext();
            else {
                Token nextToken= token_source.getNextToken();
                t.setNext(nextToken);
                t= nextToken;
            }
        }
        return t;
    }

    private final boolean setNextTokenType() {
        if (currentToken.getNext()== null) {
            Token nextToken= token_source.getNextToken();
            currentToken.setNext(nextToken);
        }
        nextTokenType= currentToken.getNext().getType();
        return true;
    }

    private final TokenType nextTokenType() {
        setNextTokenType();
        return nextTokenType;
    }

    private final boolean resetScanAhead(int amount, EnumSet<TokenType> upToFirstSet) {
        resetScanAhead(amount);
        this.upToFirstSet= upToFirstSet;
        return true;
    }

    private final boolean resetScanAhead(int amount, TokenType upToTokenType) {
        resetScanAhead(amount);
        this.upToTokenType= upToTokenType;
        return true;
    }

    private final boolean resetScanAhead(int amount) {
        currentLookaheadToken= currentToken;
        remainingLookahead= amount;
        this.upToTokenType= null;
        this.upToFirstSet= null;
        this.stopAtScanLimit= true;
        setNextTokenType();
        return true;
    }

    /*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/
    // NewAwkParser.jjt, line 200
    final public Node CompilationUnit() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 200 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean CompilationUnit1forced= false;
        CompilationUnit CompilationUnit1= null;
        if (buildTree) {
            CompilationUnit1= new CompilationUnit();
            openNodeScope(CompilationUnit1);
        }
        ParseException parseException1= null;
        int callStackSize1= parsingStack.size();
        try {
            // Code for OneOrMore specified on line 202 of NewAwkParser.jjt
            boolean inFirst0= true;
            do {
                // Code for ExpansionChoice specified on line 202 of NewAwkParser.jjt
                if (resetScanAhead(5)&&check$NewAwkParser_jjt$line_202$column_6()) {
                    // Code for NonTerminal specified on line 202 of NewAwkParser.jjt
                    pushOntoCallStack("CompilationUnit", "NewAwkParser.jjt", 202, 19);
                    try {
                        VariableDecl();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_202$column_36.contains(nextTokenType)) {
                    // Code for NonTerminal specified on line 202 of NewAwkParser.jjt
                    pushOntoCallStack("CompilationUnit", "NewAwkParser.jjt", 202, 36);
                    try {
                        MethodDecl();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (inFirst0) {
                    pushOntoCallStack("CompilationUnit", "NewAwkParser.jjt", 202, 6);
                    throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_202$column_6, parsingStack);
                }
                else {
                    break;
                }
                inFirst0= false;
            }
            while (true);
            // Code for EndOfFile specified on line 203 of NewAwkParser.jjt
            consumeToken(EOF);
            // Code for CodeBlock specified on line 204 of NewAwkParser.jjt
            return CompilationUnit1;
        }
        catch(ParseException e) {
            parseException1= e;
            throw e;
        }
        finally {
            if (parseException1== null) {
                restoreCallStack(callStackSize1);
            }
            if (buildTree) {
                if (parseException1== null) {
                    closeNodeScope(CompilationUnit1, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException1.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 206
    final public void Stmnt() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 206 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Stmnt2forced= false;
        Stmnt Stmnt2= null;
        if (buildTree) {
            Stmnt2= new Stmnt();
            openNodeScope(Stmnt2);
        }
        ParseException parseException2= null;
        int callStackSize2= parsingStack.size();
        try {
            // Code for ExpansionChoice specified on line 208 of NewAwkParser.jjt
            if (resetScanAhead(2)&&check$NewAwkParser_jjt$line_208$column_7()) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 20);
                try {
                    ExprStmnt();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== BlockAuf) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 34);
                try {
                    Block();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== IF) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 44);
                try {
                    IfStmnt();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== RETURN) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 56);
                try {
                    ReturnStmnt();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== StringLiteral) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 72);
                try {
                    KlammerAffe();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== PRINT_LINE||nextTokenType== PRINT) {
                // Code for NonTerminal specified on line 208 of NewAwkParser.jjt
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 88);
                try {
                    PrintStmnt();
                }
                finally {
                    popCallStack();
                }
            }
            else {
                pushOntoCallStack("Stmnt", "NewAwkParser.jjt", 208, 7);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_208$column_7, parsingStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Stmnt");
        }
        catch(ParseException e) {
            parseException2= e;
            throw e;
        }
        finally {
            if (parseException2== null) {
                restoreCallStack(callStackSize2);
            }
            if (buildTree) {
                if (parseException2== null) {
                    closeNodeScope(Stmnt2, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException2.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 210
    final public void Block() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 210 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Block3forced= false;
        Block Block3= null;
        if (buildTree) {
            Block3= new Block();
            openNodeScope(Block3);
        }
        ParseException parseException3= null;
        int callStackSize3= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 212 of NewAwkParser.jjt
            consumeToken(BlockAuf);
            // Code for OneOrMore specified on line 212 of NewAwkParser.jjt
            boolean inFirst1= true;
            do {
                // Code for ExpansionChoice specified on line 212 of NewAwkParser.jjt
                if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_212$column_17.contains(nextTokenType)) {
                    // Code for NonTerminal specified on line 212 of NewAwkParser.jjt
                    pushOntoCallStack("Block", "NewAwkParser.jjt", 212, 17);
                    try {
                        VariableDecl();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_212$column_34.contains(nextTokenType)) {
                    // Code for NonTerminal specified on line 212 of NewAwkParser.jjt
                    pushOntoCallStack("Block", "NewAwkParser.jjt", 212, 34);
                    try {
                        Stmnt();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (inFirst1) {
                    pushOntoCallStack("Block", "NewAwkParser.jjt", 212, 17);
                    throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_212$column_17$, parsingStack);
                }
                else {
                    break;
                }
                inFirst1= false;
            }
            while (true);
            // Code for RegexpRef specified on line 212 of NewAwkParser.jjt
            consumeToken(BlockZu);
            if (trace_enabled) LOGGER.info("Exiting normally from Block");
        }
        catch(ParseException e) {
            parseException3= e;
            throw e;
        }
        finally {
            if (parseException3== null) {
                restoreCallStack(callStackSize3);
            }
            if (buildTree) {
                if (parseException3== null) {
                    closeNodeScope(Block3, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException3.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 214
    final public void VariableDecl() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 214 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean VariableDecl4forced= false;
        VariableDecl VariableDecl4= null;
        if (buildTree) {
            VariableDecl4= new VariableDecl();
            openNodeScope(VariableDecl4);
        }
        ParseException parseException4= null;
        int callStackSize4= parsingStack.size();
        try {
            // Code for NonTerminal specified on line 216 of NewAwkParser.jjt
            pushOntoCallStack("VariableDecl", "NewAwkParser.jjt", 216, 5);
            try {
                Type();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 216 of NewAwkParser.jjt
            consumeToken(ID);
            // Code for ZeroOrOne specified on line 217 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== Zuweisung) {
                // Code for NonTerminal specified on line 217 of NewAwkParser.jjt
                pushOntoCallStack("VariableDecl", "NewAwkParser.jjt", 217, 6);
                try {
                    Assignement();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified on line 217 of NewAwkParser.jjt
                VariableDecl4.andAssignement= true;
            }
            // Code for RegexpRef specified on line 218 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            if (trace_enabled) LOGGER.info("Exiting normally from VariableDecl");
        }
        catch(ParseException e) {
            parseException4= e;
            throw e;
        }
        finally {
            if (parseException4== null) {
                restoreCallStack(callStackSize4);
            }
            if (buildTree) {
                if (parseException4== null) {
                    closeNodeScope(VariableDecl4, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException4.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 220
    final public void Assignement() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 220 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Assignement5forced= false;
        Assignement Assignement5= null;
        if (buildTree) {
            Assignement5= new Assignement();
            openNodeScope(Assignement5);
        }
        ParseException parseException5= null;
        int callStackSize5= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
            consumeToken(Zuweisung);
            // Code for ExpansionChoice specified on line 222 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== ID) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(ID);
            }
            else if (resetScanAhead(1)&&nextTokenType== IntegerLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(IntegerLiteral);
            }
            else if (resetScanAhead(1)&&nextTokenType== DoubleLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(DoubleLiteral);
            }
            else if (resetScanAhead(1)&&nextTokenType== CharLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(CharLiteral);
            }
            else if (resetScanAhead(1)&&nextTokenType== BooleanLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(BooleanLiteral);
            }
            else if (resetScanAhead(1)&&nextTokenType== StringLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(StringLiteral);
            }
            else if (resetScanAhead(1)&&nextTokenType== NullLiteral) {
                // Code for RegexpRef specified on line 222 of NewAwkParser.jjt
                consumeToken(NullLiteral);
            }
            else {
                pushOntoCallStack("Assignement", "NewAwkParser.jjt", 222, 20);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_222$column_20, parsingStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Assignement");
        }
        catch(ParseException e) {
            parseException5= e;
            throw e;
        }
        finally {
            if (parseException5== null) {
                restoreCallStack(callStackSize5);
            }
            if (buildTree) {
                if (parseException5== null) {
                    closeNodeScope(Assignement5, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException5.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 224
    final public void MethodDecl() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 224 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean MethodDecl6forced= false;
        MethodDecl MethodDecl6= null;
        if (buildTree) {
            MethodDecl6= new MethodDecl();
            openNodeScope(MethodDecl6);
        }
        ParseException parseException6= null;
        int callStackSize6= parsingStack.size();
        try {
            // Code for ExpansionChoice specified on line 226 of NewAwkParser.jjt
            if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_226$column_6.contains(nextTokenType)) {
                // Code for NonTerminal specified on line 226 of NewAwkParser.jjt
                pushOntoCallStack("MethodDecl", "NewAwkParser.jjt", 226, 6);
                try {
                    Type();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(1)&&nextTokenType== VOID) {
                // Code for RegexpRef specified on line 226 of NewAwkParser.jjt
                consumeToken(VOID);
            }
            else {
                pushOntoCallStack("MethodDecl", "NewAwkParser.jjt", 226, 6);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_226$column_6$, parsingStack);
            }
            // Code for RegexpRef specified on line 226 of NewAwkParser.jjt
            consumeToken(ID);
            // Code for RegexpRef specified on line 226 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 226 of NewAwkParser.jjt
            pushOntoCallStack("MethodDecl", "NewAwkParser.jjt", 226, 41);
            try {
                ParameterList();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 226 of NewAwkParser.jjt
            consumeToken(KlammerZu);
            // Code for NonTerminal specified on line 226 of NewAwkParser.jjt
            pushOntoCallStack("MethodDecl", "NewAwkParser.jjt", 226, 69);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MethodDecl");
        }
        catch(ParseException e) {
            parseException6= e;
            throw e;
        }
        finally {
            if (parseException6== null) {
                restoreCallStack(callStackSize6);
            }
            if (buildTree) {
                if (parseException6== null) {
                    closeNodeScope(MethodDecl6, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException6.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 228
    final public void ParameterList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 228 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ParameterList7forced= false;
        ParameterList ParameterList7= null;
        if (buildTree) {
            ParameterList7= new ParameterList();
            openNodeScope(ParameterList7);
        }
        ParseException parseException7= null;
        int callStackSize7= parsingStack.size();
        try {
            // Code for ZeroOrOne specified on line 230 of NewAwkParser.jjt
            if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_230$column_5.contains(nextTokenType)) {
                // Code for NonTerminal specified on line 230 of NewAwkParser.jjt
                pushOntoCallStack("ParameterList", "NewAwkParser.jjt", 230, 6);
                try {
                    Parameter();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified on line 230 of NewAwkParser.jjt
                while (resetScanAhead(1)&&nextTokenType== COMMA) {
                    // Code for RegexpRef specified on line 230 of NewAwkParser.jjt
                    consumeToken(COMMA);
                    // Code for NonTerminal specified on line 230 of NewAwkParser.jjt
                    pushOntoCallStack("ParameterList", "NewAwkParser.jjt", 230, 27);
                    try {
                        Parameter();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ParameterList");
        }
        catch(ParseException e) {
            parseException7= e;
            throw e;
        }
        finally {
            if (parseException7== null) {
                restoreCallStack(callStackSize7);
            }
            if (buildTree) {
                if (parseException7== null) {
                    closeNodeScope(ParameterList7, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException7.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 232
    final public void Parameter() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 232 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Parameter8forced= false;
        Parameter Parameter8= null;
        if (buildTree) {
            Parameter8= new Parameter();
            openNodeScope(Parameter8);
        }
        ParseException parseException8= null;
        int callStackSize8= parsingStack.size();
        try {
            // Code for NonTerminal specified on line 234 of NewAwkParser.jjt
            pushOntoCallStack("Parameter", "NewAwkParser.jjt", 234, 5);
            try {
                Type();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 234 of NewAwkParser.jjt
            consumeToken(ID);
            if (trace_enabled) LOGGER.info("Exiting normally from Parameter");
        }
        catch(ParseException e) {
            parseException8= e;
            throw e;
        }
        finally {
            if (parseException8== null) {
                restoreCallStack(callStackSize8);
            }
            if (buildTree) {
                if (parseException8== null) {
                    closeNodeScope(Parameter8, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException8.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 236
    final public void ExprStmnt() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 236 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ExprStmnt9forced= false;
        ExprStmnt ExprStmnt9= null;
        if (buildTree) {
            ExprStmnt9= new ExprStmnt();
            openNodeScope(ExprStmnt9);
        }
        ParseException parseException9= null;
        int callStackSize9= parsingStack.size();
        try {
            // Code for NonTerminal specified on line 238 of NewAwkParser.jjt
            pushOntoCallStack("ExprStmnt", "NewAwkParser.jjt", 238, 5);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 238 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            if (trace_enabled) LOGGER.info("Exiting normally from ExprStmnt");
        }
        catch(ParseException e) {
            parseException9= e;
            throw e;
        }
        finally {
            if (parseException9== null) {
                restoreCallStack(callStackSize9);
            }
            if (buildTree) {
                if (parseException9== null) {
                    closeNodeScope(ExprStmnt9, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException9.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 240
    final public void IfStmnt() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 240 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean IfStmnt10forced= false;
        IfStmnt IfStmnt10= null;
        if (buildTree) {
            IfStmnt10= new IfStmnt();
            openNodeScope(IfStmnt10);
        }
        ParseException parseException10= null;
        int callStackSize10= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 242 of NewAwkParser.jjt
            consumeToken(IF);
            // Code for RegexpRef specified on line 242 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 242 of NewAwkParser.jjt
            pushOntoCallStack("IfStmnt", "NewAwkParser.jjt", 242, 23);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 242 of NewAwkParser.jjt
            consumeToken(KlammerZu);
            // Code for NonTerminal specified on line 242 of NewAwkParser.jjt
            pushOntoCallStack("IfStmnt", "NewAwkParser.jjt", 242, 42);
            try {
                Stmnt();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified on line 242 of NewAwkParser.jjt
            while (resetScanAhead(1)&&nextTokenType== ELSE) {
                // Code for RegexpRef specified on line 242 of NewAwkParser.jjt
                consumeToken(ELSE);
                // Code for NonTerminal specified on line 242 of NewAwkParser.jjt
                pushOntoCallStack("IfStmnt", "NewAwkParser.jjt", 242, 58);
                try {
                    Stmnt();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified on line 242 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            if (trace_enabled) LOGGER.info("Exiting normally from IfStmnt");
        }
        catch(ParseException e) {
            parseException10= e;
            throw e;
        }
        finally {
            if (parseException10== null) {
                restoreCallStack(callStackSize10);
            }
            if (buildTree) {
                if (parseException10== null) {
                    closeNodeScope(IfStmnt10, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException10.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 244
    final public void Expr() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 244 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Expr11forced= false;
        Expr Expr11= null;
        if (buildTree) {
            Expr11= new Expr();
            openNodeScope(Expr11);
        }
        ParseException parseException11= null;
        int callStackSize11= parsingStack.size();
        try {
            // Code for NonTerminal specified on line 246 of NewAwkParser.jjt
            pushOntoCallStack("Expr", "NewAwkParser.jjt", 246, 5);
            try {
                LogicalOrExpr();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified on line 246 of NewAwkParser.jjt
            while (resetScanAhead(1)&&nextTokenType== Zuweisung) {
                // Code for RegexpRef specified on line 246 of NewAwkParser.jjt
                consumeToken(Zuweisung);
                // Code for NonTerminal specified on line 246 of NewAwkParser.jjt
                pushOntoCallStack("Expr", "NewAwkParser.jjt", 246, 35);
                try {
                    LogicalOrExpr();
                }
                finally {
                    popCallStack();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Expr");
        }
        catch(ParseException e) {
            parseException11= e;
            throw e;
        }
        finally {
            if (parseException11== null) {
                restoreCallStack(callStackSize11);
            }
            if (buildTree) {
                if (parseException11== null) {
                    closeNodeScope(Expr11, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException11.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 248
    final public void LogicalOrExpr() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 248 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for NonTerminal specified on line 250 of NewAwkParser.jjt
        pushOntoCallStack("LogicalOrExpr", "NewAwkParser.jjt", 250, 5);
        try {
            LogicalAndExpr();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified on line 250 of NewAwkParser.jjt
        while (resetScanAhead(1)&&nextTokenType== ConditionalOr) {
            // Code for RegexpRef specified on line 250 of NewAwkParser.jjt
            consumeToken(ConditionalOr);
            // Code for NonTerminal specified on line 250 of NewAwkParser.jjt
            pushOntoCallStack("LogicalOrExpr", "NewAwkParser.jjt", 250, 39);
            try {
                LogicalAndExpr();
            }
            finally {
                popCallStack();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from LogicalOrExpr");
    }

    // NewAwkParser.jjt, line 252
    final public void LogicalAndExpr() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 252 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for NonTerminal specified on line 254 of NewAwkParser.jjt
        pushOntoCallStack("LogicalAndExpr", "NewAwkParser.jjt", 254, 5);
        try {
            LogicalNotExpr();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified on line 254 of NewAwkParser.jjt
        while (resetScanAhead(1)&&nextTokenType== ConditionalAnd) {
            // Code for RegexpRef specified on line 254 of NewAwkParser.jjt
            consumeToken(ConditionalAnd);
            // Code for NonTerminal specified on line 254 of NewAwkParser.jjt
            pushOntoCallStack("LogicalAndExpr", "NewAwkParser.jjt", 254, 40);
            try {
                LogicalNotExpr();
            }
            finally {
                popCallStack();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from LogicalAndExpr");
    }

    // NewAwkParser.jjt, line 256
    final public void LogicalNotExpr() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 256 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for ZeroOrOne specified on line 258 of NewAwkParser.jjt
        if (resetScanAhead(1)&&nextTokenType== ConditionalNot) {
            // Code for RegexpRef specified on line 258 of NewAwkParser.jjt
            consumeToken(ConditionalNot);
        }
        // Code for NonTerminal specified on line 258 of NewAwkParser.jjt
        pushOntoCallStack("LogicalNotExpr", "NewAwkParser.jjt", 258, 24);
        try {
            CompExpr();
        }
        finally {
            popCallStack();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from LogicalNotExpr");
    }

    // NewAwkParser.jjt, line 260
    final public void CompExpr() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 260 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for NonTerminal specified on line 262 of NewAwkParser.jjt
        pushOntoCallStack("CompExpr", "NewAwkParser.jjt", 262, 5);
        try {
            Sum();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified on line 262 of NewAwkParser.jjt
        while (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_262$column_11.contains(nextTokenType)) {
            // Code for ExpansionChoice specified on line 262 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== GREATER) {
                // Code for RegexpRef specified on line 262 of NewAwkParser.jjt
                consumeToken(GREATER);
            }
            else if (resetScanAhead(1)&&nextTokenType== SMALLER) {
                // Code for RegexpRef specified on line 262 of NewAwkParser.jjt
                consumeToken(SMALLER);
            }
            else if (resetScanAhead(1)&&nextTokenType== S_OR_EQUAL) {
                // Code for RegexpRef specified on line 262 of NewAwkParser.jjt
                consumeToken(S_OR_EQUAL);
            }
            else if (resetScanAhead(1)&&nextTokenType== G_OR_EQUAL) {
                // Code for RegexpRef specified on line 262 of NewAwkParser.jjt
                consumeToken(G_OR_EQUAL);
            }
            else if (resetScanAhead(1)&&nextTokenType== NOT_EQUAL) {
                // Code for RegexpRef specified on line 262 of NewAwkParser.jjt
                consumeToken(NOT_EQUAL);
            }
            else {
                pushOntoCallStack("CompExpr", "NewAwkParser.jjt", 262, 13);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_262$column_13, parsingStack);
            }
            // Code for NonTerminal specified on line 262 of NewAwkParser.jjt
            pushOntoCallStack("CompExpr", "NewAwkParser.jjt", 262, 81);
            try {
                Sum();
            }
            finally {
                popCallStack();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from CompExpr");
    }

    // NewAwkParser.jjt, line 264
    final public void Sum() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 264 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for NonTerminal specified on line 266 of NewAwkParser.jjt
        pushOntoCallStack("Sum", "NewAwkParser.jjt", 266, 5);
        try {
            Product();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified on line 266 of NewAwkParser.jjt
        while (resetScanAhead(1)&&nextTokenType== PLUS||nextTokenType== MINUS) {
            // Code for ExpansionChoice specified on line 266 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== PLUS) {
                // Code for RegexpRef specified on line 266 of NewAwkParser.jjt
                consumeToken(PLUS);
            }
            else if (resetScanAhead(1)&&nextTokenType== MINUS) {
                // Code for RegexpRef specified on line 266 of NewAwkParser.jjt
                consumeToken(MINUS);
            }
            else {
                pushOntoCallStack("Sum", "NewAwkParser.jjt", 266, 17);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_266$column_17, parsingStack);
            }
            // Code for NonTerminal specified on line 266 of NewAwkParser.jjt
            pushOntoCallStack("Sum", "NewAwkParser.jjt", 266, 36);
            try {
                Product();
            }
            finally {
                popCallStack();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Sum");
    }

    // NewAwkParser.jjt, line 268
    final public void Product() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 268 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for NonTerminal specified on line 270 of NewAwkParser.jjt
        pushOntoCallStack("Product", "NewAwkParser.jjt", 270, 5);
        try {
            Sign();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified on line 270 of NewAwkParser.jjt
        while (resetScanAhead(1)&&nextTokenType== MULTIPLICATION||nextTokenType== DIVISION||nextTokenType== MODULO) {
            // Code for ExpansionChoice specified on line 270 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== MULTIPLICATION) {
                // Code for RegexpRef specified on line 270 of NewAwkParser.jjt
                consumeToken(MULTIPLICATION);
            }
            else if (resetScanAhead(1)&&nextTokenType== DIVISION) {
                // Code for RegexpRef specified on line 270 of NewAwkParser.jjt
                consumeToken(DIVISION);
            }
            else if (resetScanAhead(1)&&nextTokenType== MODULO) {
                // Code for RegexpRef specified on line 270 of NewAwkParser.jjt
                consumeToken(MODULO);
            }
            else {
                pushOntoCallStack("Product", "NewAwkParser.jjt", 270, 14);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_270$column_14, parsingStack);
            }
            // Code for NonTerminal specified on line 270 of NewAwkParser.jjt
            pushOntoCallStack("Product", "NewAwkParser.jjt", 270, 56);
            try {
                Sign();
            }
            finally {
                popCallStack();
            }
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Product");
    }

    static private final EnumSet<TokenType> Sign_FIRST_SET= EnumSet.of(PLUS, MINUS, NullLiteral, KlammerAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral);
    // NewAwkParser.jjt, line 272
    final public void Sign() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 272 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        // Code for ExpansionChoice specified on line 274 of NewAwkParser.jjt
        if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_274$column_5.contains(nextTokenType)) {
            // Code for NonTerminal specified on line 274 of NewAwkParser.jjt
            pushOntoCallStack("Sign", "NewAwkParser.jjt", 274, 5);
            try {
                Atom();
            }
            finally {
                popCallStack();
            }
        }
        else if (resetScanAhead(1)&&nextTokenType== PLUS||nextTokenType== MINUS) {
            // Code for ExpansionChoice specified on line 274 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== PLUS) {
                // Code for RegexpRef specified on line 274 of NewAwkParser.jjt
                consumeToken(PLUS);
            }
            else if (resetScanAhead(1)&&nextTokenType== MINUS) {
                // Code for RegexpRef specified on line 274 of NewAwkParser.jjt
                consumeToken(MINUS);
            }
            else {
                pushOntoCallStack("Sign", "NewAwkParser.jjt", 274, 15);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_274$column_15, parsingStack);
            }
            // Code for NonTerminal specified on line 274 of NewAwkParser.jjt
            pushOntoCallStack("Sign", "NewAwkParser.jjt", 274, 34);
            try {
                Atom();
            }
            finally {
                popCallStack();
            }
        }
        else {
            pushOntoCallStack("Sign", "NewAwkParser.jjt", 274, 5);
            throw new ParseException(currentToken.getNext(), Sign_FIRST_SET, parsingStack);
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Sign");
    }

    // NewAwkParser.jjt, line 276
    final public void Atom() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 276 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        Token t;
        // Code for ZeroOrOne specified on line 280 of NewAwkParser.jjt
        if (resetScanAhead(2)&&check$NewAwkParser_jjt$line_280$column_6()) {
            // Code for NonTerminal specified on line 280 of NewAwkParser.jjt
            pushOntoCallStack("Atom", "NewAwkParser.jjt", 280, 19);
            try {
                Cast();
            }
            finally {
                popCallStack();
            }
        }
        // Code for ExpansionChoice specified on line 281 of NewAwkParser.jjt
        if (resetScanAhead(1)&&nextTokenType== ID) {
            // Code for ExpansionChoice specified on line 281 of NewAwkParser.jjt
            if (resetScanAhead(2)&&check$NewAwkParser_jjt$line_281$column_8()) {
                // Code for NonTerminal specified on line 281 of NewAwkParser.jjt
                pushOntoCallStack("Atom", "NewAwkParser.jjt", 281, 21);
                try {
                    MethodCall();
                }
                finally {
                    popCallStack();
                }
            }
            else if (resetScanAhead(2)&&(nextTokenType== ID)) {
                // Code for RegexpRef specified on line 281 of NewAwkParser.jjt
                consumeToken(ID);
            }
            else {
                pushOntoCallStack("Atom", "NewAwkParser.jjt", 281, 8);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_281$column_8, parsingStack);
            }
            // Code for ZeroOrOne specified on line 281 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== ArrayAuf) {
                // Code for NonTerminal specified on line 281 of NewAwkParser.jjt
                pushOntoCallStack("Atom", "NewAwkParser.jjt", 281, 56);
                try {
                    ArrayAccess();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (resetScanAhead(2)&&check$NewAwkParser_jjt$line_282$column_7()) {
            // Code for RegexpRef specified on line 282 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 282 of NewAwkParser.jjt
            pushOntoCallStack("Atom", "NewAwkParser.jjt", 282, 33);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 282 of NewAwkParser.jjt
            consumeToken(KlammerZu);
        }
        else if (resetScanAhead(1)&&nextTokenType== BooleanLiteral) {
            // Code for RegexpRef specified on line 282 of NewAwkParser.jjt
            t= consumeToken(BooleanLiteral);
        }
        else if (resetScanAhead(1)&&nextTokenType== IntegerLiteral) {
            // Code for RegexpRef specified on line 282 of NewAwkParser.jjt
            t= consumeToken(IntegerLiteral);
        }
        else if (resetScanAhead(1)&&nextTokenType== DoubleLiteral) {
            // Code for RegexpRef specified on line 282 of NewAwkParser.jjt
            t= consumeToken(DoubleLiteral);
        }
        else if (resetScanAhead(1)&&nextTokenType== StringLiteral) {
            // Code for RegexpRef specified on line 283 of NewAwkParser.jjt
            t= consumeToken(StringLiteral);
        }
        else if (resetScanAhead(1)&&nextTokenType== CharLiteral) {
            // Code for RegexpRef specified on line 283 of NewAwkParser.jjt
            t= consumeToken(CharLiteral);
        }
        else if (resetScanAhead(1)&&nextTokenType== NullLiteral) {
            // Code for RegexpRef specified on line 283 of NewAwkParser.jjt
            t= consumeToken(NullLiteral);
        }
        else {
            pushOntoCallStack("Atom", "NewAwkParser.jjt", 281, 7);
            throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_281$column_7, parsingStack);
        }
        if (trace_enabled) LOGGER.info("Exiting normally from Atom");
    }

    // NewAwkParser.jjt, line 285
    final public void Cast() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 285 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Cast12forced= false;
        Cast Cast12= null;
        if (buildTree) {
            Cast12= new Cast();
            openNodeScope(Cast12);
        }
        ParseException parseException12= null;
        int callStackSize12= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 286 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 286 of NewAwkParser.jjt
            pushOntoCallStack("Cast", "NewAwkParser.jjt", 286, 18);
            try {
                Type();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 286 of NewAwkParser.jjt
            consumeToken(KlammerZu);
            if (trace_enabled) LOGGER.info("Exiting normally from Cast");
        }
        catch(ParseException e) {
            parseException12= e;
            throw e;
        }
        finally {
            if (parseException12== null) {
                restoreCallStack(callStackSize12);
            }
            if (buildTree) {
                if (parseException12== null) {
                    closeNodeScope(Cast12, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException12.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 288
    final public void MethodCall() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 288 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean MethodCall13forced= false;
        MethodCall MethodCall13= null;
        if (buildTree) {
            MethodCall13= new MethodCall();
            openNodeScope(MethodCall13);
        }
        ParseException parseException13= null;
        int callStackSize13= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 290 of NewAwkParser.jjt
            consumeToken(ID);
            // Code for RegexpRef specified on line 290 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 290 of NewAwkParser.jjt
            pushOntoCallStack("MethodCall", "NewAwkParser.jjt", 290, 23);
            try {
                ArgumentList();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 290 of NewAwkParser.jjt
            consumeToken(KlammerZu);
            if (trace_enabled) LOGGER.info("Exiting normally from MethodCall");
        }
        catch(ParseException e) {
            parseException13= e;
            throw e;
        }
        finally {
            if (parseException13== null) {
                restoreCallStack(callStackSize13);
            }
            if (buildTree) {
                if (parseException13== null) {
                    closeNodeScope(MethodCall13, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException13.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 292
    final public void ArrayAccess() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 292 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ArrayAccess14forced= false;
        ArrayAccess ArrayAccess14= null;
        if (buildTree) {
            ArrayAccess14= new ArrayAccess();
            openNodeScope(ArrayAccess14);
        }
        ParseException parseException14= null;
        int callStackSize14= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 294 of NewAwkParser.jjt
            consumeToken(ArrayAuf);
            // Code for NonTerminal specified on line 294 of NewAwkParser.jjt
            pushOntoCallStack("ArrayAccess", "NewAwkParser.jjt", 294, 16);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 294 of NewAwkParser.jjt
            consumeToken(ArrayZu);
            if (trace_enabled) LOGGER.info("Exiting normally from ArrayAccess");
        }
        catch(ParseException e) {
            parseException14= e;
            throw e;
        }
        finally {
            if (parseException14== null) {
                restoreCallStack(callStackSize14);
            }
            if (buildTree) {
                if (parseException14== null) {
                    closeNodeScope(ArrayAccess14, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException14.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 296
    final public void ArrayLength() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 296 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ArrayLength15forced= false;
        ArrayLength ArrayLength15= null;
        if (buildTree) {
            ArrayLength15= new ArrayLength();
            openNodeScope(ArrayLength15);
        }
        ParseException parseException15= null;
        int callStackSize15= parsingStack.size();
        try {
            // Code for NonTerminal specified on line 299 of NewAwkParser.jjt
            pushOntoCallStack("ArrayLength", "NewAwkParser.jjt", 299, 3);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 299 of NewAwkParser.jjt
            consumeToken(DOT);
            // Code for RegexpRef specified on line 299 of NewAwkParser.jjt
            consumeToken(LENGTH);
            if (trace_enabled) LOGGER.info("Exiting normally from ArrayLength");
        }
        catch(ParseException e) {
            parseException15= e;
            throw e;
        }
        finally {
            if (parseException15== null) {
                restoreCallStack(callStackSize15);
            }
            if (buildTree) {
                if (parseException15== null) {
                    closeNodeScope(ArrayLength15, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException15.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 301
    final public void ArgumentList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 301 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ArgumentList16forced= false;
        ArgumentList ArgumentList16= null;
        if (buildTree) {
            ArgumentList16= new ArgumentList();
            openNodeScope(ArgumentList16);
        }
        ParseException parseException16= null;
        int callStackSize16= parsingStack.size();
        try {
            // Code for ZeroOrOne specified on line 303 of NewAwkParser.jjt
            if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_303$column_5.contains(nextTokenType)) {
                // Code for NonTerminal specified on line 303 of NewAwkParser.jjt
                pushOntoCallStack("ArgumentList", "NewAwkParser.jjt", 303, 6);
                try {
                    Expr();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified on line 303 of NewAwkParser.jjt
                consumeToken(COMMA);
                // Code for NonTerminal specified on line 303 of NewAwkParser.jjt
                pushOntoCallStack("ArgumentList", "NewAwkParser.jjt", 303, 22);
                try {
                    Expr();
                }
                finally {
                    popCallStack();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ArgumentList");
        }
        catch(ParseException e) {
            parseException16= e;
            throw e;
        }
        finally {
            if (parseException16== null) {
                restoreCallStack(callStackSize16);
            }
            if (buildTree) {
                if (parseException16== null) {
                    closeNodeScope(ArgumentList16, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException16.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 305
    final public void Type() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 305 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean Type17forced= false;
        Type Type17= null;
        if (buildTree) {
            Type17= new Type();
            openNodeScope(Type17);
        }
        ParseException parseException17= null;
        int callStackSize17= parsingStack.size();
        Token t;
        try {
            // Code for ExpansionChoice specified on line 309 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== IntType) {
                // Code for RegexpRef specified on line 309 of NewAwkParser.jjt
                t= consumeToken(IntType);
            }
            else if (resetScanAhead(1)&&nextTokenType== DoubleType) {
                // Code for RegexpRef specified on line 309 of NewAwkParser.jjt
                t= consumeToken(DoubleType);
            }
            else if (resetScanAhead(1)&&nextTokenType== CharType) {
                // Code for RegexpRef specified on line 309 of NewAwkParser.jjt
                t= consumeToken(CharType);
            }
            else if (resetScanAhead(1)&&nextTokenType== BooleanType) {
                // Code for RegexpRef specified on line 309 of NewAwkParser.jjt
                t= consumeToken(BooleanType);
            }
            else if (resetScanAhead(1)&&nextTokenType== StringType) {
                // Code for RegexpRef specified on line 309 of NewAwkParser.jjt
                t= consumeToken(StringType);
            }
            else {
                pushOntoCallStack("Type", "NewAwkParser.jjt", 309, 4);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_309$column_4, parsingStack);
            }
            // Code for CodeBlock specified on line 310 of NewAwkParser.jjt
            Type17.type= t.getImage();
            //assign String-Value to Type
            // Code for ZeroOrOne specified on line 313 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== ArrayAuf) {
                // Code for RegexpRef specified on line 313 of NewAwkParser.jjt
                consumeToken(ArrayAuf);
                // Code for RegexpRef specified on line 313 of NewAwkParser.jjt
                consumeToken(ArrayZu);
                // Code for CodeBlock specified on line 313 of NewAwkParser.jjt
                Type17.isArray= true;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Type");
        }
        catch(ParseException e) {
            parseException17= e;
            throw e;
        }
        finally {
            if (parseException17== null) {
                restoreCallStack(callStackSize17);
            }
            if (buildTree) {
                if (parseException17== null) {
                    closeNodeScope(Type17, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException17.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 315
    final public void ReturnStmnt() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 315 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean ReturnStmnt18forced= false;
        ReturnStatement ReturnStmnt18= null;
        if (buildTree) {
            ReturnStmnt18= new ReturnStatement();
            openNodeScope(ReturnStmnt18);
        }
        ParseException parseException18= null;
        int callStackSize18= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 317 of NewAwkParser.jjt
            consumeToken(RETURN);
            // Code for NonTerminal specified on line 317 of NewAwkParser.jjt
            pushOntoCallStack("ReturnStmnt", "NewAwkParser.jjt", 317, 14);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 317 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            if (trace_enabled) LOGGER.info("Exiting normally from ReturnStmnt");
        }
        catch(ParseException e) {
            parseException18= e;
            throw e;
        }
        finally {
            if (parseException18== null) {
                restoreCallStack(callStackSize18);
            }
            if (buildTree) {
                if (parseException18== null) {
                    closeNodeScope(ReturnStmnt18, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException18.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 319
    final public void KlammerAffe() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 319 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean KlammerAffe19forced= false;
        KlammerAffe KlammerAffe19= null;
        if (buildTree) {
            KlammerAffe19= new KlammerAffe();
            openNodeScope(KlammerAffe19);
        }
        ParseException parseException19= null;
        int callStackSize19= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 321 of NewAwkParser.jjt
            consumeToken(StringLiteral);
            // Code for RegexpRef specified on line 321 of NewAwkParser.jjt
            consumeToken(AT);
            // Code for RegexpRef specified on line 321 of NewAwkParser.jjt
            consumeToken(BlockAuf);
            // Code for NonTerminal specified on line 322 of NewAwkParser.jjt
            pushOntoCallStack("KlammerAffe", "NewAwkParser.jjt", 322, 5);
            try {
                KlammerAffeRegex();
            }
            finally {
                popCallStack();
            }
            // Code for NonTerminal specified on line 322 of NewAwkParser.jjt
            pushOntoCallStack("KlammerAffe", "NewAwkParser.jjt", 322, 24);
            try {
                KlammerAffeAusdruck();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified on line 323 of NewAwkParser.jjt
            while (resetScanAhead(1)&&nextTokenType== Colon||nextTokenType== ConditionalNot) {
                // Code for NonTerminal specified on line 323 of NewAwkParser.jjt
                pushOntoCallStack("KlammerAffe", "NewAwkParser.jjt", 323, 6);
                try {
                    KlammerAffeRegex();
                }
                finally {
                    popCallStack();
                }
                // Code for NonTerminal specified on line 323 of NewAwkParser.jjt
                pushOntoCallStack("KlammerAffe", "NewAwkParser.jjt", 323, 25);
                try {
                    KlammerAffeAusdruck();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified on line 324 of NewAwkParser.jjt
            consumeToken(BlockZu);
            if (trace_enabled) LOGGER.info("Exiting normally from KlammerAffe");
        }
        catch(ParseException e) {
            parseException19= e;
            throw e;
        }
        finally {
            if (parseException19== null) {
                restoreCallStack(callStackSize19);
            }
            if (buildTree) {
                if (parseException19== null) {
                    closeNodeScope(KlammerAffe19, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException19.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 326
    final public void KlammerAffeRegex() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 326 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean KlammerAffeRegex20forced= false;
        KlammerAffeRegex KlammerAffeRegex20= null;
        if (buildTree) {
            KlammerAffeRegex20= new KlammerAffeRegex();
            openNodeScope(KlammerAffeRegex20);
        }
        ParseException parseException20= null;
        int callStackSize20= parsingStack.size();
        try {
            // Code for ZeroOrOne specified on line 328 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== ConditionalNot) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(ConditionalNot);
            }
            // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
            consumeToken(Colon);
            // Code for ExpansionChoice specified on line 328 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== INTEGER) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(INTEGER);
            }
            else if (resetScanAhead(1)&&nextTokenType== DOUBLE) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(DOUBLE);
            }
            else if (resetScanAhead(1)&&nextTokenType== CHAR) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(CHAR);
            }
            else if (resetScanAhead(1)&&nextTokenType== BOOLEAN) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(BOOLEAN);
            }
            else if (resetScanAhead(1)&&nextTokenType== StringType) {
                // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
                consumeToken(StringType);
            }
            else {
                pushOntoCallStack("KlammerAffeRegex", "NewAwkParser.jjt", 328, 33);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_328$column_33, parsingStack);
            }
            // Code for RegexpRef specified on line 328 of NewAwkParser.jjt
            consumeToken(Colon);
            if (trace_enabled) LOGGER.info("Exiting normally from KlammerAffeRegex");
        }
        catch(ParseException e) {
            parseException20= e;
            throw e;
        }
        finally {
            if (parseException20== null) {
                restoreCallStack(callStackSize20);
            }
            if (buildTree) {
                if (parseException20== null) {
                    closeNodeScope(KlammerAffeRegex20, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException20.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 330
    final public void KlammerAffeAusdruck() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 330 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean KlammerAffeAusdruck21forced= false;
        KlammerAffeAusdruck KlammerAffeAusdruck21= null;
        if (buildTree) {
            KlammerAffeAusdruck21= new KlammerAffeAusdruck();
            openNodeScope(KlammerAffeAusdruck21);
        }
        ParseException parseException21= null;
        int callStackSize21= parsingStack.size();
        try {
            // Code for RegexpRef specified on line 332 of NewAwkParser.jjt
            consumeToken(BlockAuf);
            // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
            consumeToken(RETURN);
            // Code for ZeroOrOne specified on line 333 of NewAwkParser.jjt
            if (resetScanAhead(1)&&first_set$NewAwkParser_jjt$line_333$column_14.contains(nextTokenType)) {
                // Code for ExpansionChoice specified on line 333 of NewAwkParser.jjt
                if (resetScanAhead(1)&&nextTokenType== THIS) {
                    // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
                    consumeToken(THIS);
                }
                else if (resetScanAhead(1)&&nextTokenType== IntegerLiteral) {
                    // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
                    consumeToken(IntegerLiteral);
                }
                else if (resetScanAhead(1)&&nextTokenType== DoubleLiteral) {
                    // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
                    consumeToken(DoubleLiteral);
                }
                else if (resetScanAhead(1)&&nextTokenType== CharLiteral) {
                    // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
                    consumeToken(CharLiteral);
                }
                else if (resetScanAhead(1)&&nextTokenType== BooleanLiteral) {
                    // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
                    consumeToken(BooleanLiteral);
                }
                else {
                    pushOntoCallStack("KlammerAffeAusdruck", "NewAwkParser.jjt", 333, 16);
                    throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_333$column_16, parsingStack);
                }
            }
            // Code for RegexpRef specified on line 333 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            // Code for RegexpRef specified on line 334 of NewAwkParser.jjt
            consumeToken(BlockZu);
            if (trace_enabled) LOGGER.info("Exiting normally from KlammerAffeAusdruck");
        }
        catch(ParseException e) {
            parseException21= e;
            throw e;
        }
        finally {
            if (parseException21== null) {
                restoreCallStack(callStackSize21);
            }
            if (buildTree) {
                if (parseException21== null) {
                    closeNodeScope(KlammerAffeAusdruck21, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException21.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    // NewAwkParser.jjt, line 336
    final public void PrintStmnt() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 336 of NewAwkParser.jjt");
        if (cancelled) throw new CancellationException();
        boolean PrintStmnt22forced= false;
        PrintStmnt PrintStmnt22= null;
        if (buildTree) {
            PrintStmnt22= new PrintStmnt();
            openNodeScope(PrintStmnt22);
        }
        ParseException parseException22= null;
        int callStackSize22= parsingStack.size();
        try {
            // Code for ExpansionChoice specified on line 339 of NewAwkParser.jjt
            if (resetScanAhead(1)&&nextTokenType== PRINT_LINE) {
                // Code for RegexpRef specified on line 339 of NewAwkParser.jjt
                consumeToken(PRINT_LINE);
            }
            else if (resetScanAhead(1)&&nextTokenType== PRINT) {
                // Code for RegexpRef specified on line 339 of NewAwkParser.jjt
                consumeToken(PRINT);
            }
            else {
                pushOntoCallStack("PrintStmnt", "NewAwkParser.jjt", 339, 4);
                throw new ParseException(currentToken.getNext(), first_set$NewAwkParser_jjt$line_339$column_4, parsingStack);
            }
            // Code for RegexpRef specified on line 339 of NewAwkParser.jjt
            consumeToken(KlammerAuf);
            // Code for NonTerminal specified on line 339 of NewAwkParser.jjt
            pushOntoCallStack("PrintStmnt", "NewAwkParser.jjt", 339, 42);
            try {
                Expr();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified on line 339 of NewAwkParser.jjt
            consumeToken(KlammerZu);
            // Code for RegexpRef specified on line 339 of NewAwkParser.jjt
            consumeToken(SEMICOLON);
            if (trace_enabled) LOGGER.info("Exiting normally from PrintStmnt");
        }
        catch(ParseException e) {
            parseException22= e;
            throw e;
        }
        finally {
            if (parseException22== null) {
                restoreCallStack(callStackSize22);
            }
            if (buildTree) {
                if (parseException22== null) {
                    closeNodeScope(PrintStmnt22, true);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException: "+parseException22.getMessage());
                    clearNodeScope();
                }
            }
        }
    }

    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_202$column_6= EnumSet.of(VOID, IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_202$column_36= EnumSet.of(VOID, IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_208$column_7= EnumSet.of(PLUS, MINUS, ConditionalNot, RETURN, NullLiteral, IF, KlammerAuf, BlockAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral, PRINT_LINE, PRINT);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_212$column_17$= EnumSet.of(PLUS, MINUS, ConditionalNot, RETURN, NullLiteral, IF, KlammerAuf, BlockAuf, IntType, DoubleType, CharType, BooleanType, StringType, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral, PRINT_LINE, PRINT);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_212$column_17= EnumSet.of(IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_212$column_34= EnumSet.of(PLUS, MINUS, ConditionalNot, RETURN, NullLiteral, IF, KlammerAuf, BlockAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral, PRINT_LINE, PRINT);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_222$column_20= EnumSet.of(NullLiteral, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_226$column_6$= EnumSet.of(VOID, IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_226$column_6= EnumSet.of(IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_230$column_5= EnumSet.of(IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_262$column_11= EnumSet.of(NOT_EQUAL, G_OR_EQUAL, S_OR_EQUAL, GREATER, SMALLER);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_262$column_13= EnumSet.of(NOT_EQUAL, G_OR_EQUAL, S_OR_EQUAL, GREATER, SMALLER);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_266$column_17= EnumSet.of(PLUS, MINUS);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_270$column_14= EnumSet.of(MULTIPLICATION, DIVISION, MODULO);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_274$column_5= EnumSet.of(NullLiteral, KlammerAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_274$column_15= EnumSet.of(PLUS, MINUS);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_281$column_7= EnumSet.of(NullLiteral, KlammerAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_281$column_8= EnumSet.of(ID);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_303$column_5= EnumSet.of(PLUS, MINUS, ConditionalNot, NullLiteral, KlammerAuf, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral, ID, StringLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_309$column_4= EnumSet.of(IntType, DoubleType, CharType, BooleanType, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_328$column_33= EnumSet.of(INTEGER, DOUBLE, CHAR, BOOLEAN, StringType);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_333$column_14= EnumSet.of(THIS, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_333$column_16= EnumSet.of(THIS, BooleanLiteral, CharLiteral, IntegerLiteral, DoubleLiteral);
    static private final EnumSet<TokenType> first_set$NewAwkParser_jjt$line_339$column_4= EnumSet.of(PRINT_LINE, PRINT);
    private final boolean scanToken(TokenType expectedType) {
        if (remainingLookahead<=0) return true;
        if (currentLookaheadToken.getNext()== null) {
            Token nextToken= token_source.getNextToken();
            currentLookaheadToken.setNext(nextToken);
        }
        currentLookaheadToken= currentLookaheadToken.getNext();
        TokenType type= currentLookaheadToken.getType();
        if (type!=expectedType) return false;
        if (remainingLookahead!=Integer.MAX_VALUE) remainingLookahead--;
        if (type== upToTokenType) remainingLookahead= 0;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        if (remainingLookahead<=0) return true;
        if (currentLookaheadToken.getNext()== null) {
            Token nextToken= token_source.getNextToken();
            currentLookaheadToken.setNext(nextToken);
        }
        currentLookaheadToken= currentLookaheadToken.getNext();
        TokenType type= currentLookaheadToken.getType();
        if (!types.contains(type)) return false;
        if (remainingLookahead!=Integer.MAX_VALUE) remainingLookahead--;
        if (type== upToTokenType) remainingLookahead= 0;
        return true;
    }

    //====================================
    // Lookahead Routines
    //====================================
    private final boolean check$NewAwkParser_jjt$line_202$column_6() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("CompilationUnit", "NewAwkParser.jjt", 202, 19);
        if (!check$VariableDecl()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_208$column_7() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Stmnt", "NewAwkParser.jjt", 208, 20);
        if (!check$ExprStmnt()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_280$column_6() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Atom", "NewAwkParser.jjt", 280, 19);
        if (!check$Cast()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_281$column_8() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Atom", "NewAwkParser.jjt", 281, 21);
        if (!check$MethodCall()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_282$column_7() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(KlammerAuf)) return false;
        pushOntoLookaheadStack("Atom", "NewAwkParser.jjt", 282, 33);
        if (!check$Expr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$VariableDecl() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("VariableDecl", "NewAwkParser.jjt", 216, 5);
        stopAtScanLimit= false;
        if (!check$Type()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        if (!scanToken(ID)) return false;
        Token token23= currentLookaheadToken;
        if (!(check$NewAwkParser_jjt$line_217$column_6())) currentLookaheadToken= token23;
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    private final boolean check$ExprStmnt() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("ExprStmnt", "NewAwkParser.jjt", 238, 5);
        stopAtScanLimit= false;
        if (!check$Expr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    private final boolean check$Cast() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(KlammerAuf)) return false;
        pushOntoLookaheadStack("Cast", "NewAwkParser.jjt", 286, 18);
        stopAtScanLimit= false;
        if (!check$Type()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$MethodCall() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(ID)) return false;
        if (!scanToken(KlammerAuf)) return false;
        return true;
    }

    private final boolean check$Expr() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Expr", "NewAwkParser.jjt", 246, 5);
        if (!check$LogicalOrExpr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token24= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_246$column_23())) {
                currentLookaheadToken= token24;
                break;
            }
        }
        return true;
    }

    private final boolean check$Type() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(first_set$NewAwkParser_jjt$line_309$column_4)) return false;
        Token token25= currentLookaheadToken;
        if (!(check$NewAwkParser_jjt$line_313$column_4())) currentLookaheadToken= token25;
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_217$column_6() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("VariableDecl", "NewAwkParser.jjt", 217, 6);
        stopAtScanLimit= false;
        if (!check$Assignement()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$LogicalOrExpr() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("LogicalOrExpr", "NewAwkParser.jjt", 250, 5);
        if (!check$LogicalAndExpr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token26= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_250$column_23())) {
                currentLookaheadToken= token26;
                break;
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_246$column_23() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(Zuweisung)) return false;
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_313$column_4() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(ArrayAuf)) return false;
        if (!scanToken(ArrayZu)) return false;
        return true;
    }

    private final boolean check$Assignement() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(Zuweisung)) return false;
        if (!scanToken(first_set$NewAwkParser_jjt$line_222$column_20)) return false;
        return true;
    }

    private final boolean check$LogicalAndExpr() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("LogicalAndExpr", "NewAwkParser.jjt", 254, 5);
        if (!check$LogicalNotExpr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token27= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_254$column_23())) {
                currentLookaheadToken= token27;
                break;
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_250$column_23() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(ConditionalOr)) return false;
        return true;
    }

    private final boolean check$LogicalNotExpr() {
        if (remainingLookahead<=0) return true;
        Token token28= currentLookaheadToken;
        if (!(scanToken(ConditionalNot))) currentLookaheadToken= token28;
        pushOntoLookaheadStack("LogicalNotExpr", "NewAwkParser.jjt", 258, 24);
        if (!check$CompExpr()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_254$column_23() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(ConditionalAnd)) return false;
        return true;
    }

    private final boolean check$CompExpr() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("CompExpr", "NewAwkParser.jjt", 262, 5);
        if (!check$Sum()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token29= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_262$column_12())) {
                currentLookaheadToken= token29;
                break;
            }
        }
        return true;
    }

    private final boolean check$Sum() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Sum", "NewAwkParser.jjt", 266, 5);
        if (!check$Product()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token30= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_266$column_16())) {
                currentLookaheadToken= token30;
                break;
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_262$column_12() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(first_set$NewAwkParser_jjt$line_262$column_13)) return false;
        return true;
    }

    private final boolean check$Product() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Product", "NewAwkParser.jjt", 270, 5);
        if (!check$Sign()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        while (remainingLookahead> 0) {
            Token token31= currentLookaheadToken;
            if (!(check$NewAwkParser_jjt$line_270$column_13())) {
                currentLookaheadToken= token31;
                break;
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_266$column_16() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(first_set$NewAwkParser_jjt$line_266$column_17)) return false;
        return true;
    }

    private final boolean check$Sign() {
        if (remainingLookahead<=0) return true;
        Token token32= currentLookaheadToken;
        int remainingLookahead32= remainingLookahead;
        if (!(check$NewAwkParser_jjt$line_274$column_5())) {
            currentLookaheadToken= token32;
            remainingLookahead= remainingLookahead32;
            if (!(check$NewAwkParser_jjt$line_274$column_14())) {
                return false;
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_270$column_13() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(first_set$NewAwkParser_jjt$line_270$column_14)) return false;
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_274$column_5() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Sign", "NewAwkParser.jjt", 274, 5);
        if (!check$Atom()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_274$column_14() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(first_set$NewAwkParser_jjt$line_274$column_15)) return false;
        pushOntoLookaheadStack("Sign", "NewAwkParser.jjt", 274, 34);
        if (!check$Atom()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$Atom() {
        if (remainingLookahead<=0) return true;
        Token token33= currentLookaheadToken;
        if (!(check$NewAwkParser_jjt$line_280$column_6())) currentLookaheadToken= token33;
        Token token34= currentLookaheadToken;
        int remainingLookahead34= remainingLookahead;
        if (!(check$NewAwkParser_jjt$line_281$column_7())) {
            currentLookaheadToken= token34;
            remainingLookahead= remainingLookahead34;
            if (!(check$NewAwkParser_jjt$line_282$column_7())) {
                currentLookaheadToken= token34;
                remainingLookahead= remainingLookahead34;
                if (!(scanToken(BooleanLiteral))) {
                    currentLookaheadToken= token34;
                    remainingLookahead= remainingLookahead34;
                    if (!(scanToken(IntegerLiteral))) {
                        currentLookaheadToken= token34;
                        remainingLookahead= remainingLookahead34;
                        if (!(scanToken(DoubleLiteral))) {
                            currentLookaheadToken= token34;
                            remainingLookahead= remainingLookahead34;
                            if (!(scanToken(StringLiteral))) {
                                currentLookaheadToken= token34;
                                remainingLookahead= remainingLookahead34;
                                if (!(scanToken(CharLiteral))) {
                                    currentLookaheadToken= token34;
                                    remainingLookahead= remainingLookahead34;
                                    if (!(scanToken(NullLiteral))) {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_281$column_7() {
        if (remainingLookahead<=0) return true;
        Token token35= currentLookaheadToken;
        int remainingLookahead35= remainingLookahead;
        if (!(check$NewAwkParser_jjt$line_281$column_8())) {
            currentLookaheadToken= token35;
            remainingLookahead= remainingLookahead35;
            if (!(scanToken(ID))) {
                return false;
            }
        }
        Token token36= currentLookaheadToken;
        if (!(check$NewAwkParser_jjt$line_281$column_56())) currentLookaheadToken= token36;
        return true;
    }

    private final boolean check$NewAwkParser_jjt$line_281$column_56() {
        if (remainingLookahead<=0) return true;
        pushOntoLookaheadStack("Atom", "NewAwkParser.jjt", 281, 56);
        if (!check$ArrayAccess()) {
            popLookaheadStack();
            return false;
        }
        popLookaheadStack();
        return true;
    }

    private final boolean check$ArrayAccess() {
        if (remainingLookahead<=0) return true;
        if (!scanToken(ArrayAuf)) return false;
        return true;
    }

    private boolean trace_enabled= false;
    public void setTracingEnabled(boolean tracingEnabled) {
        trace_enabled= tracingEnabled;
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void enable_tracing() {
        setTracingEnabled(true);
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void disable_tracing() {
        setTracingEnabled(false);
    }

    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;
        // We actually only use this when we're working with the LookaheadStack
        final boolean stopAtScanLimit;
        NonTerminalCall(String sourceFile, String productionName, int line, int column, boolean stopAtScanLimit) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.line= line;
            this.column= column;
            this.stopAtScanLimit= false;
        }

        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this(sourceFile, productionName, line, column, false);
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("NewAwkParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.print(productionName);
            ps.println(" stopAtScanLimit: "+this.stopAtScanLimit);
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        parsingStack.remove(parsingStack.size()-1);
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size()> prevSize) {
            popCallStack();
        }
    }

    private Iterator<NonTerminalCall> stackIteratorForward() {
        final Iterator<NonTerminalCall> parseStackIterator= parsingStack.iterator();
        final Iterator<NonTerminalCall> lookaheadStackIterator= lookaheadStack.iterator();
        return new Iterator<NonTerminalCall> () {
            public boolean hasNext() {
                return parseStackIterator.hasNext()||lookaheadStackIterator.hasNext();
            }

            public NonTerminalCall next() {
                return parseStackIterator.hasNext()?parseStackIterator.next():
                lookaheadStackIterator.next();
            }

        }
        ;
    }

    private Iterator<NonTerminalCall> stackIteratorBackward() {
        final ListIterator<NonTerminalCall> parseStackIterator= parsingStack.listIterator(parsingStack.size());
        final ListIterator<NonTerminalCall> lookaheadStackIterator= lookaheadStack.listIterator(lookaheadStack.size());
        return new Iterator<NonTerminalCall> () {
            public boolean hasNext() {
                return parseStackIterator.hasPrevious()||lookaheadStackIterator.hasPrevious();
            }

            public NonTerminalCall next() {
                return lookaheadStackIterator.hasPrevious()?lookaheadStackIterator.previous():
                parseStackIterator.previous();
            }

        }
        ;
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall(fileName, methodName, line, column, stopAtScanLimit));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc= lookaheadStack.remove(lookaheadStack.size()-1);
        this.stopAtScanLimit= ntc.stopAtScanLimit;
    }

    private void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    private final boolean tolerantParsing= false;
    public boolean isParserTolerant() {
        return tolerantParsing;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) throws ParseException {
        boolean forced= false;
        InvalidToken invalidToken= null;
        Token oldToken= currentToken;
        currentToken= currentToken.getNext();
        if (currentToken== null) {
            currentToken= token_source.getNextToken();
        }
        if (currentToken.getType()!=expectedType) {
            handleUnexpectedTokenType(expectedType, forced, oldToken);
        }
        else {
            this.lastParsedToken= currentToken;
        }
        if (buildTree&&tokensAreNodes) {
            if (invalidToken!=null) {
                pushNode(invalidToken);
            }
            pushNode(currentToken);
        }
        if (trace_enabled) LOGGER.info("Consumed token of type "+currentToken.getType()+" from "+currentToken.getLocation());
        return currentToken;
    }

    private void handleUnexpectedTokenType(TokenType expectedType, boolean forced, Token oldToken) throws ParseException {
        throw new ParseException(currentToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastParsed;
        NodeScope nodeScope;
        ParseState() {
            this.lastParsed= NewAwkParser.this.lastParsedToken;
            this.nodeScope= (NodeScope) currentNodeScope.clone();
        }

    }
    private ArrayList<ParseState> parseStateStack= new ArrayList<> ();
    void stashParseState() {
        parseStateStack.add(new ParseState());
    }

    ParseState popParseState() {
        return parseStateStack.remove(parseStateStack.size()-1);
    }

    void restoreStashedParseState() {
        ParseState state= popParseState();
        currentNodeScope= state.nodeScope;
        if (state.lastParsed!=null) {
            //REVISIT
            currentToken= lastParsedToken= state.lastParsed;
        }
    }

    private boolean buildTree= true;
    private boolean tokensAreNodes= true;
    private boolean unparsedTokensAreNodes= false;
    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes= unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes= tokensAreNodes;
    }

    NodeScope currentNodeScope= new NodeScope();
    /** 
	 * Returns the root node of the AST.  It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        Node root= currentNodeScope.rootNode();
        recursivelySetInputSource(root, this.token_source.input_stream);
        return root;
    }

    static private void recursivelySetInputSource(Node n, FileLineMap fileLineMap) {
        n.setInputSource(fileLineMap);
        for (Node child : n.children()) {
            //            if (child instanceof Token) {
            //                 ((Token) child).setImage(null);
            //            } 
            recursivelySetInputSource(child, fileLineMap);
        }
    }

    /**
     * push a node onto the top of the node stack
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * Returns the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * Returns the node currently on the top of the stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** Returns the number of children on the stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    public void clearNodeScope() {
        currentNodeScope.clear();
    }

    public void openNodeScope(Node n) {
        Token start= getToken(1);
        n.setBeginLine(start.getBeginLine());
        n.setBeginColumn(start.getBeginColumn());
        n.setInputSource(token_source.input_stream);
        new NodeScope();
        n.open();
        if (trace_enabled) LOGGER.info("Opened node scope for node of type: "+n.getClass().getName());
        if (trace_enabled) LOGGER.info("Scope nesting level is "+currentNodeScope.nestingLevel());
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack.
	 */
    public void closeNodeScope(Node n, int num) {
        n.setEndLine(currentToken.getEndLine());
        n.setEndColumn(currentToken.getEndColumn());
        if (trace_enabled) LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", popping "+num+" nodes off the stack.");
        currentNodeScope.close();
        ArrayList<Node> nodes= new ArrayList<Node> ();
        for (int i= 0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (unparsedTokensAreNodes&&(child instanceof Token)) {
                Token token= (Token) child;
                Token specialToken= token;
                while (specialToken!=null) {
                    specialToken= specialToken.getSpecialToken();
                }
                while (specialToken!=null&&specialToken!=token) {
                    n.addChild(specialToken);
                    specialToken= specialToken.getNext();
                }
            }
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
	 * A conditional node is constructed if the condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    public void closeNodeScope(Node n, boolean condition) {
        n.setEndLine(currentToken.getEndLine());
        n.setEndColumn(currentToken.getEndColumn());
        if (condition) {
            if (trace_enabled) LOGGER.finer("Closing node scope for node of type: "+n.getClass().getName()+", popping "+nodeArity()+" nodes off the stack.");
            int a= nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes= new ArrayList<Node> ();
            while (a--> 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes&&(child instanceof Token)) {
                    Token token= (Token) child;
                    Token specialToken= token;
                    while (specialToken.getSpecialToken()!=null) {
                        specialToken= specialToken.getSpecialToken();
                    }
                    while (specialToken!=null&&specialToken!=token) {
                        n.addChild(specialToken);
                        specialToken= specialToken.getNext();
                    }
                }
                n.addChild(child);
            }
            n.close();
            if (trace_enabled) {
                LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
            pushNode(n);
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", there are now "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
        else {
            currentNodeScope.close();
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree= buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    NewAwkParser jjtree= this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node>  {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope= NewAwkParser.this.currentNodeScope;
            NewAwkParser.this.currentNodeScope= this;
        }

        boolean isRootScope() {
            return parentScope== null;
        }

        Node rootNode() {
            NodeScope ns= this;
            while (ns.parentScope!=null) {
                ns= ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            NewAwkParser.this.currentNodeScope= parentScope;
        }

        int nestingLevel() {
            int result= 0;
            NodeScope parent= this;
            while (parent.parentScope!=null) {
                result++;
                parent= parent.parentScope;
            }
            return result;
        }

    }
}
