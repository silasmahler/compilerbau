/* Generated by: JavaCC 21 Parser Generator. NewAwkLexer.java */
package de.compilerbau.NewAwkCompiler.javacc21;

import static de.compilerbau.NewAwkCompiler.javacc21.NewAwkConstants.TokenType.*;
import de.compilerbau.NewAwkCompiler.NewAwkDumpVisitor;
import de.compilerbau.NewAwkCompiler.javacc21.*;
import de.compilerbau.NewAwkCompiler.javacc21.NewAwkParser;
import java.io.*;
import java.util.*;
import java.io.Reader;
import java.io.IOException;
import java.util.logging.Logger;
import java.util.*;
@SuppressWarnings("unused")
public class NewAwkLexer implements NewAwkConstants {
    private static final Logger LOGGER= Logger.getLogger("NewAwkParser");
    private boolean trace_enabled= true;
    private void setTracingEnabled(boolean trace_enabled) {
        this.trace_enabled= trace_enabled;
    }

    public String getInputSource() {
        return inputSource;
    }

    public void setInputSource(String inputSource) {
        this.inputSource= inputSource;
        input_stream.setInputSource(inputSource);
    }

    public NewAwkLexer(String inputSource, CharSequence chars) {
        this(inputSource, chars, LexicalState.DEFAULT, 1, 1);
    }

    public NewAwkLexer(String inputSource, CharSequence chars, LexicalState lexState, int line, int column) {
        input_stream= new FileLineMap(inputSource, chars, line, column);
        switchTo(lexState);
    }

    public NewAwkLexer(String inputSource, Reader reader) {
        this(inputSource, reader, LexicalState.DEFAULT, 1, 1);
    }

    /**
     * @deprecated Use the constructor where you specify an inputSource string so that you can have error messages that make sense!
     */
    @Deprecated public NewAwkLexer(Reader reader) {
        this("input", reader);
    }

    public NewAwkLexer(String inputSource, Reader reader, LexicalState lexState, int line, int column) {
        input_stream= new FileLineMap(inputSource, reader, line, column);
        switchTo(lexState);
    }

    FileLineMap input_stream;
    public final void backup(int amount) {
        input_stream.backup(amount);
    }

    LexicalState lexicalState= LexicalState.DEFAULT;
    void addToken(Token token) {
        input_stream.addToken(token);
    }

    int tabSize= 8;
    /** Switch to specified lexical state. */
    public boolean switchTo(LexicalState lexState) {
        if (this.lexicalState!=lexState) {
            if (trace_enabled) LOGGER.info("Switching from lexical state "+this.lexicalState+" to "+lexState);
            this.lexicalState= lexState;
            return true;
        }
        return false;
    }

    private InvalidToken invalidToken;
    private Token pendingToken;
    public Token getNextToken() {
        if (pendingToken!=null) {
            Token result= pendingToken;
            pendingToken= null;
            return result;
        }
        Token tok= null;
        do {
            tok= nextToken();
        }
        while (tok instanceof InvalidToken);
        if (invalidToken!=null) {
            addToken(invalidToken);
            invalidToken.setNext(tok);
            Token it= invalidToken;
            pendingToken= tok;
            this.invalidToken= null;
            return it;
        }
        addToken(tok);
        return tok;
    }

    // Reset the token source input
    // to just after the Token passed in.
    void reset(Token t) {
        input_stream.goTo(t.getEndLine(), t.getEndColumn());
        input_stream.forward(1);
    }

    FileLineMap getFileLineMap() {
        return input_stream;
    }

    private int jjnewStateCnt;
    private int jjround;
    private int jjmatchedPos;
    //FIXME,should be an enum.
    private int jjmatchedKind;
    private String inputSource= "input";
    // BitSet for TOKEN
    static private BitSet tokenSet= BitSet.valueOf(new long[]{35483439251587041L, });
    private final int[] jjrounds= new int[56];
    private final int[] jjstateSet= new int[112];
    private final StringBuilder image= new StringBuilder();
    private int matchedCharsLength;
    char curChar;
    // Method to reinitialize the jjrounds array.
    private void ReInitRounds() {
        int i;
        jjround= 0x80000001;
        for (i= 56; i--> 0; ) jjrounds[i]= 0x80000000;
    }

    private Token nextToken() {
        Token specialToken= null;
        Token matchedToken;
        int curPos= 0;
        EOFLoop:
        while (true) {
            int retval1= input_stream.beginToken();
            curChar= (char)(retval1);
            if (retval1== -1) {
                // Handle end of file
                if (trace_enabled) LOGGER.info("Returning the <EOF> token.");
                jjmatchedKind= 0;
                Token eof= jjFillToken();
                tokenLexicalActions();
                eof.setSpecialToken(specialToken);
                addToken(eof);
                return eof;
            }
            image.setLength(0);
            matchedCharsLength= 0;
            while (curChar<=32&&(0x100002600L&(1L<<curChar))!=0L) {
                if (trace_enabled) LOGGER.info("Skipping character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+")");
                curChar= (char) input_stream.beginToken();
                if (curChar== (char)-1) {
                    continue EOFLoop;
                }
            }
            jjmatchedKind= 0x7FFFFFFF;
            jjmatchedPos= 0;
            if (trace_enabled) LOGGER.info("Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
            curPos= jjMoveStringLiteralDfa0();
            if (jjmatchedKind!=0x7FFFFFFF) {
                if (jjmatchedPos+1<curPos) {
                    if (trace_enabled) LOGGER.info("   Putting back "+(curPos-jjmatchedPos-1)+" characters into the input stream.");
                    input_stream.backup(curPos-jjmatchedPos-1);
                }
                if (trace_enabled) LOGGER.info("****** FOUND A "+tokenImage[jjmatchedKind]+" MATCH ("+ParseException.addEscapes(input_stream.getSuffix(jjmatchedPos+1))+") ******\n");
                if (tokenSet.get(jjmatchedKind)) {
                    matchedToken= jjFillToken();
                    tokenLexicalActions();
                    jjmatchedKind= matchedToken.getType().ordinal();
                    addToken(matchedToken);
                    return matchedToken;
                }
                else {
                    continue EOFLoop;
                }
            }
            int error_line= input_stream.getEndLine();
            int error_column= input_stream.getEndColumn();
            String error_after= null;
            error_after= curPos<=1?"":
            input_stream.getImage();
            if (invalidToken== null) {
                invalidToken= new InvalidToken(""+curChar, input_stream);
                invalidToken.setBeginLine(error_line);
                invalidToken.setBeginColumn(error_column);
            }
            else {
                invalidToken.setImage(invalidToken.getImage()+curChar);
            }
            invalidToken.setEndLine(error_line);
            invalidToken.setEndColumn(error_column);
            return invalidToken;
        }
    }

    private void tokenLexicalActions() {
        switch(jjmatchedKind) {
            default:
            break;
        }
    }

    private Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        curTokenImage= input_stream.getImage();
        beginLine= input_stream.getBeginLine();
        beginColumn= input_stream.getBeginColumn();
        endLine= input_stream.getEndLine();
        endColumn= input_stream.getEndColumn();
        t= Token.newToken(TokenType.values()[jjmatchedKind], curTokenImage, this);
        t.setBeginLine(beginLine);
        t.setEndLine(endLine);
        t.setBeginColumn(beginColumn);
        t.setEndColumn(endColumn);
        //        t.setInputSource(this.inputSource);
        return t;
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state]!=jjround) {
            jjstateSet[jjnewStateCnt++]= state;
            jjrounds[state]= jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++]= jjnextStates[start];
        }
        while (start++!=end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++!=end);
    }

    private void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start+1]);
    }

    protected static final int[][][] statesForState= {{{0}, {1}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {3}, {4}, {5}, {6}, {7}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {9}, {10}, {11}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {13}, {14}, {15}, {16}, {17}, {18}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {20}, {21}, {22}, {23}, {24}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {26}, {27}, {28}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {30}, {31}, {32}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {35}, {36}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {38}, {39}, {40}, {41}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {43}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {45}, {46}, {2, 8, 12, 19, 25, 29, 33, 34, 37, 42, 44, 47, }, {48}, {49}, {50}, {51}, {52}, {53}, {54}, {55}, }, };
    protected static final int[][] kindForState= {{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 52, 52, 52, 52, 52, 53, 53, 54, 54, 54, 51, 51, 52, 52, 52, 52, 52, 52, 52}};
    int kindCnt= 0;
    protected final String jjKindsForBitVector(int i, long vec) {
        String retVal= "";
        if (i== 0) kindCnt= 0;
        for (int j= 0; j<64; j++) {
            if ((vec&(1L<<j))!=0L) {
                if (kindCnt++> 0) retVal+=", ";
                if (kindCnt%5== 0) retVal+="\n     ";
                retVal+=tokenImage[i*64+j];
            }
        }
        return retVal;
    }

    protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end) {
        boolean[] kindDone= new boolean[56];
        String retVal= "";
        int cnt= 0;
        for (int i= start; i<end; i++) {
            if (vec[i]== -1) continue;
            int[] stateSet= statesForState[lexicalState.ordinal()][vec[i]];
            for (int j= 0; j<stateSet.length; j++) {
                int state= stateSet[j];
                if (!kindDone[kindForState[lexState][state]]) {
                    kindDone[kindForState[lexState][state]]= true;
                    if (cnt++> 0) retVal+=", ";
                    if (cnt%5== 0) retVal+="\n     ";
                    retVal+=tokenImage[kindForState[lexState][state]];
                }
            }
        }
        if (cnt== 0) return"{  }";
        else return"{ "+retVal+" }";
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind= kind;
        jjmatchedPos= pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        return pos+1;
    }

    private int jjStartNfa(int pos, long active0) {
        return jjMoveNfa(jjStopStringLiteralDfa(pos, active0), pos+1);
    }

    private final int jjStopStringLiteralDfa(int pos, long active0) {
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        switch(pos) {
            case 0:
            if ((active0&0x8000000L)!=0L) {
                jjmatchedKind= 53;
                return 28;
            }
            if ((active0&0x2000000L)!=0L) {
                jjmatchedKind= 53;
                return 1;
            }
            if ((active0&0x20000000000L)!=0L) return 35;
            if ((active0&0xf5c00000L)!=0L) {
                jjmatchedKind= 53;
                return 43;
            }
            if ((active0&0x10000000000L)!=0L) return 38;
            return-1;
            case 1:
            if ((active0&0x2000000L)!=0L) return 43;
            if ((active0&0xfdc00000L)!=0L) {
                jjmatchedKind= 53;
                jjmatchedPos= 1;
                return 43;
            }
            return-1;
            case 2:
            if ((active0&0xfdc00000L)!=0L) {
                jjmatchedKind= 53;
                jjmatchedPos= 2;
                return 43;
            }
            return-1;
            case 3:
            if ((active0&0xb0400000L)!=0L) {
                jjmatchedKind= 53;
                jjmatchedPos= 3;
                return 43;
            }
            if ((active0&0x4d800000L)!=0L) return 43;
            return-1;
            case 4:
            if ((active0&0xb0400000L)!=0L) {
                jjmatchedKind= 53;
                jjmatchedPos= 4;
                return 43;
            }
            return-1;
            case 5:
            if ((active0&0x20400000L)!=0L) return 43;
            if ((active0&0x90000000L)!=0L) {
                jjmatchedKind= 53;
                jjmatchedPos= 5;
                return 43;
            }
            return-1;
            case 6:
            if ((active0&0x90000000L)!=0L) return 43;
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates(int pos, int kind, int state) {
        jjmatchedKind= kind;
        jjmatchedPos= pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            return pos+1;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        return jjMoveNfa(state, pos+1);
    }

    private int jjMoveStringLiteralDfa0() {
        switch(curChar) {
            case 33:
            jjmatchedKind= 20;
            return jjMoveStringLiteralDfa1(0x1000L);
            case 37:
            return jjStopAtPos(0, 9);
            case 38:
            return jjMoveStringLiteralDfa1(0x40000L);
            case 39:
            return jjStartNfaWithStates(0, 41, 35);
            case 40:
            return jjStopAtPos(0, 32);
            case 41:
            return jjStopAtPos(0, 33);
            case 42:
            return jjStopAtPos(0, 7);
            case 43:
            return jjStopAtPos(0, 5);
            case 44:
            return jjStopAtPos(0, 39);
            case 45:
            return jjStopAtPos(0, 6);
            case 46:
            return jjStartNfaWithStates(0, 40, 38);
            case 47:
            return jjStopAtPos(0, 8);
            case 58:
            return jjStopAtPos(0, 17);
            case 59:
            return jjStopAtPos(0, 38);
            case 60:
            jjmatchedKind= 16;
            return jjMoveStringLiteralDfa1(0x4000L);
            case 61:
            jjmatchedKind= 10;
            return jjMoveStringLiteralDfa1(0x800L);
            case 62:
            jjmatchedKind= 15;
            return jjMoveStringLiteralDfa1(0x2000L);
            case 64:
            return jjStopAtPos(0, 42);
            case 66:
            return jjMoveStringLiteralDfa1(0x80000000L);
            case 67:
            return jjMoveStringLiteralDfa1(0x40000000L);
            case 68:
            return jjMoveStringLiteralDfa1(0x20000000L);
            case 73:
            return jjMoveStringLiteralDfa1(0x10000000L);
            case 91:
            return jjStopAtPos(0, 36);
            case 93:
            return jjStopAtPos(0, 37);
            case 94:
            return jjStopAtPos(0, 21);
            case 101:
            return jjMoveStringLiteralDfa1(0x4000000L);
            case 105:
            return jjMoveStringLiteralDfa1(0x2000000L);
            case 110:
            return jjMoveStringLiteralDfa1(0x1000000L);
            case 114:
            return jjMoveStringLiteralDfa1(0x400000L);
            case 116:
            return jjMoveStringLiteralDfa1(0x8000000L);
            case 118:
            return jjMoveStringLiteralDfa1(0x800000L);
            case 123:
            return jjStopAtPos(0, 34);
            case 124:
            return jjMoveStringLiteralDfa1(0x80000L);
            case 125:
            return jjStopAtPos(0, 35);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return jjMoveNfa(2, 0);
        }
    }

    private int jjMoveStringLiteralDfa1(long active0) {
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(0, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 38:
            if ((active0&0x40000L)!=0L) return jjStopAtPos(1, 18);
            break;
            case 61:
            if ((active0&0x800L)!=0L) return jjStopAtPos(1, 11);
            else if ((active0&0x1000L)!=0L) return jjStopAtPos(1, 12);
            else if ((active0&0x2000L)!=0L) return jjStopAtPos(1, 13);
            else if ((active0&0x4000L)!=0L) return jjStopAtPos(1, 14);
            break;
            case 101:
            return jjMoveStringLiteralDfa2(active0, 0x400000L);
            case 102:
            if ((active0&0x2000000L)!=0L) return jjStartNfaWithStates(1, 25, 43);
            break;
            case 104:
            return jjMoveStringLiteralDfa2(active0, 0x48000000L);
            case 108:
            return jjMoveStringLiteralDfa2(active0, 0x4000000L);
            case 110:
            return jjMoveStringLiteralDfa2(active0, 0x10000000L);
            case 111:
            return jjMoveStringLiteralDfa2(active0, 0xa0800000L);
            case 117:
            return jjMoveStringLiteralDfa2(active0, 0x1000000L);
            case 124:
            if ((active0&0x80000L)!=0L) return jjStopAtPos(1, 19);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(0, active0);
    }

    private int jjMoveStringLiteralDfa2(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa(0, old0);
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(1, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 2;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 97:
            return jjMoveStringLiteralDfa3(active0, 0x40000000L);
            case 105:
            return jjMoveStringLiteralDfa3(active0, 0x8800000L);
            case 108:
            return jjMoveStringLiteralDfa3(active0, 0x1000000L);
            case 111:
            return jjMoveStringLiteralDfa3(active0, 0x80000000L);
            case 115:
            return jjMoveStringLiteralDfa3(active0, 0x4000000L);
            case 116:
            return jjMoveStringLiteralDfa3(active0, 0x10400000L);
            case 117:
            return jjMoveStringLiteralDfa3(active0, 0x20000000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(1, active0);
    }

    private int jjMoveStringLiteralDfa3(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa(1, old0);
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(2, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 3;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 98:
            return jjMoveStringLiteralDfa4(active0, 0x20000000L);
            case 100:
            if ((active0&0x800000L)!=0L) return jjStartNfaWithStates(3, 23, 43);
            break;
            case 101:
            if ((active0&0x4000000L)!=0L) return jjStartNfaWithStates(3, 26, 43);
            return jjMoveStringLiteralDfa4(active0, 0x10000000L);
            case 108:
            if ((active0&0x1000000L)!=0L) return jjStartNfaWithStates(3, 24, 43);
            return jjMoveStringLiteralDfa4(active0, 0x80000000L);
            case 114:
            if ((active0&0x40000000L)!=0L) return jjStartNfaWithStates(3, 30, 43);
            break;
            case 115:
            if ((active0&0x8000000L)!=0L) return jjStartNfaWithStates(3, 27, 43);
            break;
            case 117:
            return jjMoveStringLiteralDfa4(active0, 0x400000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(2, active0);
    }

    private int jjMoveStringLiteralDfa4(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa(2, old0);
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(3, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 4;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 101:
            return jjMoveStringLiteralDfa5(active0, 0x80000000L);
            case 103:
            return jjMoveStringLiteralDfa5(active0, 0x10000000L);
            case 108:
            return jjMoveStringLiteralDfa5(active0, 0x20000000L);
            case 114:
            return jjMoveStringLiteralDfa5(active0, 0x400000L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(3, active0);
    }

    private int jjMoveStringLiteralDfa5(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa(3, old0);
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(4, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 5;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 97:
            return jjMoveStringLiteralDfa6(active0, 0x80000000L);
            case 101:
            if ((active0&0x20000000L)!=0L) return jjStartNfaWithStates(5, 29, 43);
            return jjMoveStringLiteralDfa6(active0, 0x10000000L);
            case 110:
            if ((active0&0x400000L)!=0L) return jjStartNfaWithStates(5, 22, 43);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(4, active0);
    }

    private int jjMoveStringLiteralDfa6(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa(4, old0);
        if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
            LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        }
        if (trace_enabled) LOGGER.info("   Possible string literal matches : { "+jjKindsForBitVector(0, active0)+" } ");
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa(5, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 6;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 110:
            if ((active0&0x80000000L)!=0L) return jjStartNfaWithStates(6, 31, 43);
            break;
            case 114:
            if ((active0&0x10000000L)!=0L) return jjStartNfaWithStates(6, 28, 43);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa(5, active0);
    }

    private int jjMoveNfa(int startState, int curPos) {
        int startsAt= 0;
        jjnewStateCnt= 56;
        int i= 1;
        jjstateSet[0]= startState;
        if (trace_enabled) LOGGER.info("   Starting NFA to match one of : "+jjKindsForStateVector(lexicalState.ordinal(), jjstateSet, 0, 1));
        if (trace_enabled) LOGGER.info(""+"Current character : "+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        int kind= 0x7fffffff;
        while (true) {
            if (++jjround== 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l= 1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        case 43:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 53) kind= 53;
                        jjCheckNAdd(43);
                        break;
                        case 28:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 53) kind= 53;
                        jjCheckNAdd(43);
                        break;
                        case 2:
                        if ((0x3ff000000000000L&l)!=0L) {
                            if (kind> 51) kind= 51;
                            jjAddStates(0, 4);
                        }
                        else if (curChar== 34) jjAddStates(5, 6);
                        else if (curChar== 46) jjstateSet[jjnewStateCnt++]= 38;
                        else if (curChar== 39) jjstateSet[jjnewStateCnt++]= 35;
                        break;
                        case 34:
                        if (curChar== 39) jjCheckNAdd(35);
                        break;
                        case 35:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 36;
                        break;
                        case 36:
                        if (curChar== 39&&kind> 50) kind= 50;
                        break;
                        case 37:
                        if (curChar== 46) jjCheckNAdd(38);
                        break;
                        case 38:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 52) kind= 52;
                        jjCheckNAddTwoStates(38, 39);
                        break;
                        case 40:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 41;
                        break;
                        case 41:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 52) kind= 52;
                        jjCheckNAdd(41);
                        break;
                        case 44:
                        if (curChar== 34) jjCheckNAddTwoStates(45, 46);
                        break;
                        case 45:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(45, 46);
                        break;
                        case 46:
                        if (curChar== 34&&kind> 54) kind= 54;
                        break;
                        case 47:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 51) kind= 51;
                        jjCheckNAddStates(0, 4);
                        break;
                        case 48:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 51) kind= 51;
                        jjCheckNAdd(48);
                        break;
                        case 49:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(49, 50);
                        break;
                        case 50:
                        if (curChar!=46) break;
                        if (kind> 52) kind= 52;
                        jjAddStates(7, 8);
                        break;
                        case 51:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 52) kind= 52;
                        jjCheckNAddTwoStates(51, 52);
                        break;
                        case 53:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 54;
                        break;
                        case 54:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 52) kind= 52;
                        jjCheckNAdd(54);
                        break;
                        case 55:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddTwoStates(55, 37);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l= 1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        if ((0x7fffffe87fffffeL&l)!=0L) {
                            if (kind> 53) kind= 53;
                            jjCheckNAdd(43);
                        }
                        if (curChar== 110) jjstateSet[jjnewStateCnt++]= 0;
                        break;
                        case 28:
                        if ((0x7fffffe87fffffeL&l)!=0L) {
                            if (kind> 53) kind= 53;
                            jjCheckNAdd(43);
                        }
                        if (curChar== 114) jjstateSet[jjnewStateCnt++]= 27;
                        break;
                        case 2:
                        if ((0x7fffffe87fffffeL&l)!=0L) {
                            if (kind> 53) kind= 53;
                            jjstateSet[jjnewStateCnt++]= 43;
                        }
                        if (curChar== 102) jjstateSet[jjnewStateCnt++]= 32;
                        else if (curChar== 116) jjstateSet[jjnewStateCnt++]= 28;
                        else if (curChar== 83) jjstateSet[jjnewStateCnt++]= 24;
                        else if (curChar== 98) jjstateSet[jjnewStateCnt++]= 18;
                        else if (curChar== 99) jjstateSet[jjnewStateCnt++]= 11;
                        else if (curChar== 100) jjstateSet[jjnewStateCnt++]= 7;
                        else if (curChar== 105) jjstateSet[jjnewStateCnt++]= 1;
                        break;
                        case 0:
                        if (curChar== 116&&kind> 43) kind= 43;
                        break;
                        case 3:
                        if (curChar== 101&&kind> 43) kind= 43;
                        break;
                        case 4:
                        if (curChar== 108) jjstateSet[jjnewStateCnt++]= 3;
                        break;
                        case 5:
                        if (curChar== 98) jjstateSet[jjnewStateCnt++]= 4;
                        break;
                        case 6:
                        if (curChar== 117) jjstateSet[jjnewStateCnt++]= 5;
                        break;
                        case 7:
                        if (curChar== 111) jjstateSet[jjnewStateCnt++]= 6;
                        break;
                        case 8:
                        if (curChar== 100) jjCheckNAdd(7);
                        break;
                        case 9:
                        if (curChar== 114&&kind> 43) kind= 43;
                        break;
                        case 10:
                        if (curChar== 97) jjstateSet[jjnewStateCnt++]= 9;
                        break;
                        case 11:
                        if (curChar== 104) jjstateSet[jjnewStateCnt++]= 10;
                        break;
                        case 12:
                        if (curChar== 99) jjCheckNAdd(11);
                        break;
                        case 13:
                        if (curChar== 110&&kind> 43) kind= 43;
                        break;
                        case 14:
                        if (curChar== 97) jjstateSet[jjnewStateCnt++]= 13;
                        break;
                        case 15:
                        if (curChar== 101) jjstateSet[jjnewStateCnt++]= 14;
                        break;
                        case 16:
                        if (curChar== 108) jjstateSet[jjnewStateCnt++]= 15;
                        break;
                        case 17:
                        if (curChar== 111) jjstateSet[jjnewStateCnt++]= 16;
                        break;
                        case 18:
                        if (curChar== 111) jjstateSet[jjnewStateCnt++]= 17;
                        break;
                        case 19:
                        if (curChar== 98) jjCheckNAdd(18);
                        break;
                        case 20:
                        if (curChar== 103&&kind> 43) kind= 43;
                        break;
                        case 21:
                        if (curChar== 110) jjstateSet[jjnewStateCnt++]= 20;
                        break;
                        case 22:
                        if (curChar== 105) jjstateSet[jjnewStateCnt++]= 21;
                        break;
                        case 23:
                        if (curChar== 114) jjstateSet[jjnewStateCnt++]= 22;
                        break;
                        case 24:
                        if (curChar== 116) jjstateSet[jjnewStateCnt++]= 23;
                        break;
                        case 25:
                        if (curChar== 83) jjCheckNAdd(24);
                        break;
                        case 26:
                        if (curChar== 101&&kind> 49) kind= 49;
                        break;
                        case 27:
                        if (curChar== 117) jjstateSet[jjnewStateCnt++]= 26;
                        break;
                        case 29:
                        if (curChar== 116) jjCheckNAdd(28);
                        break;
                        case 30:
                        if (curChar== 115) jjstateSet[jjnewStateCnt++]= 26;
                        break;
                        case 31:
                        if (curChar== 108) jjstateSet[jjnewStateCnt++]= 30;
                        break;
                        case 32:
                        if (curChar== 97) jjstateSet[jjnewStateCnt++]= 31;
                        break;
                        case 33:
                        if (curChar== 102) jjCheckNAdd(32);
                        break;
                        case 35:
                        if ((0x7fffffe87fffffeL&l)!=0L) jjstateSet[jjnewStateCnt++]= 36;
                        break;
                        case 39:
                        if ((0x2000000020L&l)!=0L) jjAddStates(9, 10);
                        break;
                        case 42:
                        if ((0x7fffffe87fffffeL&l)== 0L) break;
                        if (kind> 53) kind= 53;
                        jjCheckNAdd(43);
                        break;
                        case 43:
                        if ((0x7fffffe87fffffeL&l)== 0L) break;
                        if (kind> 53) kind= 53;
                        jjCheckNAdd(43);
                        break;
                        case 45:
                        if ((0x7fffffe87fffffeL&l)!=0L) jjCheckNAddTwoStates(45, 46);
                        break;
                        case 52:
                        if ((0x2000000020L&l)!=0L) jjAddStates(11, 12);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte= (int)(curChar>>8);
                int i1= hiByte>>6;
                long l1= 1L<<(hiByte&077);
                int i2= (curChar&0xff)>>6;
                long l2= 1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind= kind;
                jjmatchedPos= curPos;
                kind= 0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i= jjnewStateCnt)== (startsAt= 56-(jjnewStateCnt= startsAt))) return curPos;
            if (trace_enabled) LOGGER.info("   Possible kinds of longer matches : "+jjKindsForStateVector(lexicalState.ordinal(), jjstateSet, startsAt, i));
            int retval= input_stream.readChar();
            if (retval>=0) {
                curChar= (char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+ParseException.addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private static final int[] jjnextStates= {48, 49, 50, 55, 37, 45, 46, 51, 52, 40, 41, 53, 54};
}
