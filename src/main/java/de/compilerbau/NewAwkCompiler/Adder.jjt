options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
   FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Adder)

package de.compilerbau.NewAwkCompiler.generated.adder;

import java.util.*;
import java.io.*;

public class Adder {
 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTestAddNumbers.txt");
     FileInputStream is = new FileInputStream(file);
     Adder parser = new Adder(new BufferedInputStream(is));
     parser.Start();

      ((SimpleNode)jjtree.rootNode()).dump(">");

     }
}
PARSER_END(Adder)
/*
    ==============================================================================================
    Lexer token deinifitions are defined in this section.
    ==============================================================================================
*/
SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < PLUS : "+" > }
TOKEN : { < NUMBER : (["0"-"9"])+ > }
/*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/

void Start() #Adder :
{}
{
    { System.out.println("ENTER: START()"); }
    <NUMBER>
    (
    <PLUS>
    <NUMBER>
    )*
    <EOF>
    { System.out.println("EXIT: START()"); }

}