options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
   FORCE_LA_CHECK = true;
   LOOKAHEAD = 1;
}

PARSER_BEGIN(NewAwkParser)

package de.compilerbau.NewAwkCompiler.generated;

import java.util.*;
import java.io.*;

public class NewAwkParser {
 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTest.txt");
     FileInputStream is = new FileInputStream(file);
     NewAwkParser parser = new NewAwkParser(new BufferedInputStream(is));
     parser.program();

     ((SimpleNode)jjtree.rootNode()).dump(">");

     }
}
PARSER_END(NewAwkParser)
/*
    ==============================================================================================
    Lexer token deinifitions are defined in this section.
    ==============================================================================================
*/
SKIP :
{ <WHITESPACE: " ">
| <TAB: "\t">
| <NEW_LINE: "\n">
| <CARRIAGE_RETURN: "\r">
}
TOKEN : /* OPERATORS */
{ <PLUS: "+">
| <MINUS: "-">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <MODULO: "%">
| <Zuweisung: "=">
| <EQUAL: "==">
| <NOT_EQUAL: "!=">
| <G_OR_EQUAL: ">=">
| <S_OR_EQUAL: "<=">
| <GREATER: ">">
| <SMALLER: "<">
| <Colon: ":">
| <ConditionalAnd: "&&">
| <ConditionalOr: "||">
| <ConditionalNot: "!">
| <Exponentiation: "^">
}
TOKEN : /* KEYWORDS */
{ <RETURN : "return">
}
TOKEN : /* SEPARATORS */
{ <KlammerAuf: "(">
| <KlammerZu: ")">
| <BlockAuf: "{">
| <BlockZu: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
}
TOKEN : /* BASIC */
{ <#LETTER: ["_","a"-"z","A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#EXPO: ["e","E"]("+"|"-")?(<DIGIT>)+>
| <Type: <ArrayType> | <Datatype> >
| <ArrayType: <Datatype> <LBRACKET> <RBRACKET>>
| <Datatype: ("int"|"double"|"char"|"boolean"|"String")>
| <Apostrophe: "'">
| <BooleanConditionalAnd: <BooleanValue><ConditionalAnd><BooleanValue>
                          (<ConditionalAnd><BooleanValue> )* >
| <BooleanConditionalOr: <BooleanValue><ConditionalOr><BooleanValue>
                          (<ConditionalOr><BooleanValue> )* >
| <BooleanConditionalNot: (<ConditionalNot><BooleanValue>)>

}
TOKEN : /* LITERALS */
{ <CharLiteral: <Apostrophe> (<LETTER> | <DIGIT>) <Apostrophe>>
| <IntegerLiteral: (<DIGIT>)+>
| <DoubleLiteral: ((<DIGIT>)+<DOT>(<DIGIT>)*(<EXPO>)?) | ((<DIGIT>)*<DOT> (<DIGIT>)+(<EXPO> )?)>
| <VOID: "void">
| <NullLiteral: "null">
| <Bezeichner: <LETTER>(<DIGIT>|<LETTER>)*>
| <StringLiteral: "\"" <STRING_CONTENT> "\"">
| <#STRING_CONTENT: (<LETTER>|<DIGIT>)* >
| <BooleanValue: (<TRUE>|<FALSE>)>
| <#TRUE: "true">
| <#FALSE: "false">
}
/*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/
void program() #Program : {}
{
    (fieldDeclaration() | method())
    [fieldDeclaration() | method()]
}
void fieldDeclaration() #FieldDeclaration: {}
{
    <Type> <Bezeichner> <Zuweisung>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )
}
void method() #Method : {}
{
    methodSignature()
    methodBody()
}
void methodSignature() #MethodSignature : {}
{
    (LOOKAHEAD(2) <Type> | <VOID>) <Bezeichner> <KlammerAuf> parameterList() <KlammerZu>
}
void parameterList() #ParameterList : {}
{
    <Type> <Bezeichner> (LOOKAHEAD(2) <COMMA> <Type> <Bezeichner>)*
}
void methodBody() #MethodBody : {}
{
    <BlockAuf> (fieldDeclaration() | methodCall() | returnStatement())+ <BlockZu>
}

void methodCall() #MethodCall : {}
{
    <Bezeichner><KlammerAuf><KlammerZu>
}
void returnStatement() #ReturnStatement : {}
{
    { System.out.println("ENTER: returnStatement()"); }
    <RETURN>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral>
    | <BooleanValue> | <StringLiteral> | <NullLiteral> ) <SEMICOLON>
}
void comparision() #Comparision:
{}
{
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )
    (<EQUAL> | <NOT_EQUAL> | <SMALLER> | <S_OR_EQUAL> | <GREATER> | <G_OR_EQUAL>)
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )
}