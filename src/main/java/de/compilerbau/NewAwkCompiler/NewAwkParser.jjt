options {
   BASE_SRC_DIR = "../../../";
   PARSER_PACKAGE = "de.compilerbau.NewAwkCompiler.javacc21";
   //DEBUG_PARSER = true;
   //DEBUG_TOKEN_MANAGER = true;
   VISITOR = true;
}

PARSER_BEGIN(NewAwkParser)

import de.compilerbau.NewAwkCompiler.Visitors.*;
import de.compilerbau.NewAwkCompiler.javacc21.*;
import java.io.*;
import java.util.*;

public class NewAwkParser {
    private static String testToken;
    static public ArrayList<Node> roots= new ArrayList<>();

    public static void main(String[] args) throws ParseException, FileNotFoundException {
     System.err.println("Arguments: " + args.length);
     for (String s: args
          ) {
         System.err.println("Arg: " + s);
     }
     List<File> failures = new ArrayList<File>();
     List<File> successes = new ArrayList<File>();
     boolean failureOccurred = false;
     NewAwkParser parser;
     if (args.length == 0) {
         usage();
     }
     List<File> files = new ArrayList<File>();
     for (String arg : args) {
         File file = new File(arg);
         if (!file.exists()) {
             System.err.println("File " + file + " does not exist.");
             continue;
         }
         addFilesRecursively(files, file);
     }
     long startTime = System.currentTimeMillis();
     for (File file : files) {
         try {
             // A bit screwball, we'll dump the tree if there is only one arg. :-)
             parseFile(file, files.size() >= 1);
         }
         catch (Exception e) {
             System.err.println("Error processing file: " + file);
             e.printStackTrace();
             failures.add(file);
             continue;
         }
         System.out.println(file.getName()  + " parsed successfully.");
         successes.add(file);
     }
     for (File file : failures) {
         System.out.println("Parse failed on: " + file);
     }
     System.out.println("\nParsed " + successes.size() + " files successfully");
     System.out.println("Failed on " + failures.size() + " files.");
     System.out.println("\nDuration: " + (System.currentTimeMillis() - startTime) + " milliseconds");
 }

         static public void parseFile(File file, boolean dumpTree) throws IOException, ParseException {
             FileReader fr = new FileReader(file);
             NewAwkParser parser = new NewAwkParser(fr);
             parser.setInputSource(file.toString());
             Node root=parser.CompilationUnit();
     // Uncomment the following code if you want all the parsed trees
     //  to remain in memory. This is useful if you want to know how much
     //  memory it takes to parse all the source code in the JDK, for example.
     //  (About 8GB if we're talking about JDK 13)
     //       roots.add(root);
     //       if (roots.size() % 1000 == 0) {
     //            System.out.println("-----------------------------------------------");
     //            System.out.println("Parsed "  +  roots.size() + " files.");
     //            System.out.println("-----------------------------------------------");
     //       }

             if (dumpTree) {
                 Nodes.dump(root, ">");
                 DumpVisitor dumpVisitor = new DumpVisitor();
                 SymbolTableBuilderVisitor symbolTableBuilderVisitor = new SymbolTableBuilderVisitor();
                 if(root instanceof CompilationUnit) {
                     System.out.println("Entering Visitors...");
                     //((CompilationUnit) root).jjtAccept(dumpVisitor, null);
                     ((CompilationUnit) root).jjtAccept(symbolTableBuilderVisitor, null);
                 }
             }
        }

         static public void addFilesRecursively(List<File> files, File file) {
             if (file.isDirectory()) {
                 for (File f : file.listFiles()) {
                     addFilesRecursively(files, f);
                 }
             }
             else if (file.getName().endsWith("java") &&
                     !file.getName().endsWith("-info.java") ||
                     file.getName().endsWith("txt") &&
                     !file.getName().endsWith("-info.java")
             ) {
                 files.add(file);
             }
         }

         static public void usage() {
             System.out.println("Usage: java JParse <sourcefiles or directories>");
             System.out.println("If you just pass it one java source file, it dumps the AST");
             System.exit(-1);
         }
}
PARSER_END(NewAwkParser)
/*
    ==============================================================================================
    Lexer token deinifitions are defined in this section.
    ==============================================================================================
*/
SKIP :
{ <WHITESPACE: " ">
| <TAB: "\t">
| <NEW_LINE: "\n">
| <CARRIAGE_RETURN: "\r">
}
TOKEN : /* OPERATORS */
{ <PLUS: "+">
| <MINUS: "-">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <MODULO: "%">
| <Zuweisung: "=">
| <EQUAL: "==">
| <NOT_EQUAL: "!=">
| <G_OR_EQUAL: ">=">
| <S_OR_EQUAL: "<=">
| <GREATER: ">">
| <SMALLER: "<">
| <Colon: ":">
| <ConditionalAnd: "&&">
| <ConditionalOr: "||">
| <ConditionalNot: "!">
| <Exponentiation: "^">
}
TOKEN : /* KEYWORDS */
{ <RETURN : "return">
| <VOID: "void">
| <NullLiteral: "null">
| <IF: "if">
| <ELSE: "else">
| <THIS: "this">
| <INTEGER_CLASS: "Integer">
| <DOUBLE_CLASS: "Double">
| <CHAR_CLASS: "Char">
| <BOOLEAN_CLASS: "Boolean">
}
TOKEN : /* SEPARATORS */
{ <KlammerAuf: "(">
| <KlammerZu: ")">
| <BlockAuf: "{">
| <BlockZu: "}">
| <ArrayAuf: "[">
| <ArrayZu: "]">
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
| <Apostrophe: "'">
| <AT: "@">
}
TOKEN : /* BASIC */
{ <TypeInt: "int">
| <TypeDouble: "double">
| <TypeChar: "char">
| <TypeBoolean: "boolean">
| <TypeString: "String">
| <#LETTER: ["_","a"-"z","A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#EXPO: ["e","E"]("+"|"-")?(<DIGIT>)+>
}
TOKEN : /* LITERALS */
{ <#TRUE: "true">
| <#FALSE: "false">
| <BooleanLiteral: (<TRUE>|<FALSE>)>
| <CharLiteral: <Apostrophe> (<LETTER> | <DIGIT>) <Apostrophe>>
| <IntegerLiteral: (<DIGIT>)+>
| <DoubleLiteral: ((<DIGIT>)+<DOT>(<DIGIT>)*(<EXPO>)?) | ((<DIGIT>)*<DOT> (<DIGIT>)+(<EXPO> )?)>
| <ID: <LETTER>(<DIGIT>|<LETTER>)*>
| <StringLiteral: "\"" <STRING_CONTENT> "\"">
| <#STRING_CONTENT: (<LETTER>|<DIGIT>|<DoubleLiteral>|(" ") )* >
| <PRINT_LINE: "System.out.println">
| <LENGTH: "length()">
| <PRINT: "System.out.print">
| <NEXT: "System.next">
| <NEXT_INT: "System.nextInt">
| <NEXT_DOUBLE: "System.nextDouble">
| <NEXT_CHAR: "System.nextChar">
| <NEXT_BOOLEAN: "System.nextBoolean">
| <NEXT_STRING: "System.nextString">
}
/*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/
Node CompilationUnit #CompilationUnit : {}
    (LOOKAHEAD(14) VariableDecl() | // 14 = up to arrays with 5 dimensions
     LOOKAHEAD(4) Assignement() |
     LOOKAHEAD(8) VariableDeclAndAssignement() |
     MethodDecl())+
     <EOF>
    {return jjtThis;};
VariableDecl #VariableDecl : Type() <ID> <SEMICOLON>;
Assignement #Assignement: <ID> <Zuweisung> ExprStmnt();
VariableDeclAndAssignement #VariableDeclAndAssignement :
    Type() <ID> <Zuweisung> ExprStmnt();
MethodDecl() #MethodDecl : { Token t;}
    (Type()| <VOID>  {jjtThis.isVoid = true;})
    <ID> <KlammerAuf> ParameterList() <KlammerZu> Block();
ParameterList #ParameterList : [Type() <ID>] (<COMMA> Type() <ID>)*;
Stmnt #Stmnt :(Block() | IfStmnt() | ReturnStmnt() | PrintStmnt()
     | LOOKAHEAD(3) VariableDecl()
     | LOOKAHEAD(3) Assignement()
     | LOOKAHEAD(3) VariableDeclAndAssignement()
     | LOOKAHEAD(3) KlammerAffe());
Block       #Block : <BlockAuf> (Stmnt())+ <BlockZu>;
IfStmnt     #IfStmnt : <IF> <KlammerAuf> Expr <KlammerZu> Stmnt (<ELSE> Stmnt)* <SEMICOLON>;
ExprStmnt   #ExprStmnt :Expr <SEMICOLON>;
Expr        #Expr : LogicalOrExpr ( <Zuweisung> LogicalOrExpr)*;
LogicalOrExpr  #LogicalOrExpr : LogicalAndExpr (<ConditionalOr> LogicalAndExpr)*;
LogicalAndExpr #LogicalAndExpr : LogicalNotExpr (<ConditionalAnd> LogicalNotExpr)*;
LogicalNotExpr #LogicalNotExpr : (<ConditionalNot>)* CompExpr;
CompExpr       #CompExpr : Sum ((<GREATER> | <SMALLER>  | <S_OR_EQUAL> | <G_OR_EQUAL> | <EQUAL> |<NOT_EQUAL>) Sum)*;
Sum            #Sum : Product ((<PLUS> | <MINUS> ) Product)*;
Product        #Product : Sign ((<MULTIPLICATION> | <DIVISION> | <MODULO>) Sign )*;
Sign           #Sign: Atom | (<PLUS> | <MINUS> ) Atom;
Atom           #Atom : { Token t; }
    (NextStmnt() | PrintStmnt()
    | (<ID>
        (ArrayAccess
            {jjtThis.isArrayAccess = true;
            jjtThis.arrayAccessDimension++;}
        )*
        [".length()"{jjtThis.hasLength = true;}])
    | <BlockAuf> Expr
        (<COMMA> Expr
        {jjtThis.isArrayInit = true;}
        )*
     <BlockZu>
        {jjtThis.isArrayInit = true;}
    | <KlammerAuf> Expr <KlammerZu>
        {jjtThis.isExpression = true;}
    | t=<BooleanLiteral>
        {jjtThis.type = new Type("boolean");
         jjtThis.value = t.getImage();}
    | t=<IntegerLiteral>
        {jjtThis.type = new Type("int");
         jjtThis.value = t.getImage();}
    | t=<DoubleLiteral>
        {jjtThis.type = new Type("double");
         jjtThis.value = t.getImage();}
    | t=<CharLiteral>
        {jjtThis.type = new Type("char");
         jjtThis.value = t.getImage();}
    | t=<NullLiteral>
    | LOOKAHEAD(3) t=<StringLiteral>
        [(".length()" {jjtThis.hasLength = true;
           jjtThis.atomLength = t.getImage().length();}
        |".isInt()" {jjtThis.isInt = true;}
        |".isDouble()" {jjtThis.isDouble = true;}
        |".toInt()" {jjtThis.toInt = true;}
        |".toDouble()" {jjtThis.toDouble = true;}
        )]
    );
MethodCall #MethodCall : <ID> <KlammerAuf> [Expr (<COMMA> Expr)*] <KlammerZu>;
ArrayAccess #ArrayAccess : <ArrayAuf> Expr() <ArrayZu>;
Type #Type : { Token t;}
  (t=<TypeInt> | t=<TypeDouble> | t=<TypeChar> | t=<TypeBoolean> | t=<TypeString>)
  {jjtThis.type = t.getImage();} //assign String-Value to Type
  (<ArrayAuf> <ArrayZu>
  {jjtThis.isArray = true; jjtThis.arrayTypeDimension++;}
  )*;
ReturnStmnt #ReturnStatement : <RETURN> Expr <SEMICOLON>;
// "Klammeraffe"
KlammerAffe #KlammerAffe :
    <StringLiteral> <AT> <BlockAuf>
    (KlammerAffeAusdruck)+
    <BlockZu>;
KlammerAffeAusdruck #KlammerAffeAusdruck :
    [<ConditionalNot>]
    <Colon>
        (<INTEGER_CLASS> | <DOUBLE_CLASS> | <CHAR_CLASS>
        | <BOOLEAN_CLASS> | <TypeString> )
    <Colon>
    <BlockAuf>
    <RETURN>
        [(<THIS> | <IntegerLiteral> | <DoubleLiteral>
        | <CharLiteral> | <BooleanLiteral>)]
    <SEMICOLON>
    <BlockZu>;
// Print
PrintStmnt #PrintStmnt: (<PRINT_LINE> | <PRINT> )
    <KlammerAuf> Expr <KlammerZu> <SEMICOLON>;
// Next
NextStmnt #NextStmnt : {Token t;}
(t=<NEXT> {jjtThis.nextValue = t.getImage();}
 | t=<NEXT_INT> {jjtThis.nextValue = t.getImage();}
 | t=<NEXT_DOUBLE> {jjtThis.nextValue = t.getImage();}
 | t=<NEXT_CHAR> {jjtThis.nextValue = t.getImage();}
 | t=<NEXT_BOOLEAN> {jjtThis.nextValue = t.getImage();}
 | t=<NEXT_STRING> {jjtThis.nextValue = t.getImage();}
 )  <KlammerAuf> <KlammerZu>;