PARSER_BEGIN(NewAwkParser)

package de.compilerbau.NewAwkCompiler.generated;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import de.compilerbau.NewAwkCompiler.generated.Token;


public class NewAwkParser {
 public static void main(String[] args) {
        NewAwkParser parser = new NewAwkParser(System.in);
        Token t;
        do {
            t = parser.getNextToken();
            switch(t.kind) {
                case KlammerAuf:
                System.out.println("KlammerAuf"); break;
                case KlammerZu:
                System.out.println("KlammerZu"); break;
                case Bezeichner:
                System.out.println("Bezeichner"); break;
                case TypKonverter:
                System.out.println("TypKonverter"); break;
                case Schluesselwort:
                System.out.println("Schluesselwort"); break;
                case EOF:
                System.out.println("EOF"); break;
            }
        } while (t.kind != EOF);
  parser = new NewAwkParser(new StringReader("int main(String[] args) { \n" +
                                                  "int x = 5; \n" +
                                                  "return x; \n" +
                                              "} \n" +
                                              "int y = 7;")).parseFile();
  }
}
PARSER_END(NewAwkParser)
SKIP : {
<Whitespace: " ">
| <Tab: "\t">
| <Newline: "\n">
| <CarriageReturn: "\r">
}
TOKEN : {
<#Alphabet: ["a"-"z","A"-"Z"]>
| <#Digit: ["0"-"9"]>
| <#Expo: ["e","E"]("+"|"-")?(<Digit>)+>
| <Bezeichner: <Alphabet>(<Digit>|<Alphabet>)*>
| <Datentyp: ("int"|"double"|"char"|"boolean"|"String")>
| <Schluesselwort: ("if"|"else"|"while"|"do"|"return"|"void"|"break"|"switch"|"case"|"for")>
| <TypKonverter: "!">
| <KlammerAuf: "(">
| <KlammerZu: ")">
| <IntegerLiteral: (<Digit>)+>
| <DoubleLiteral: ((<Digit>)+"."(<Digit>)*(<Expo>)?)
| ((<Digit>)*"."(<Digit>)+(<Expo>)?)>
| <PlusSymbol: "+">
| <MinusSymbol: "-">
| <Multiplikation: "*">
| <Division: "/">
| <ModuloOperator: "%">
| <Exponentiation: "^">
| <Boolean: ("true"|"false")>
| <Equal: "==">
| <NotEqual: "!=">
| <GreaterOrEqual: ">=">
| <SmallerOrEqual: "<=">
| <Greater: ">">
| <Smaller: "<">
| <Semicolon: ";">
| <Zuweisung: "=">
| <NAME: (["a"-"z", "A"-"Z"])+>
}

List<String> parseFile() :
	{
		Token token;
		List<String> names = new ArrayList<String>();
	}
	{
		( token=<NAME> { names.add(token.toString()); } )*
		<EOF> { return names; }
	}

