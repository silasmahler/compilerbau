/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NewAwkParser.jj */
/*@egen*/options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(NewAwkParser)

import java.util.*;
import java.io.*;

public class NewAwkParser/*@bgen(jjtree)*/implements NewAwkParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTNewAwkParserState jjtree = new JJTNewAwkParserState();

/*@egen*/
 private static String testToken;

 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTest.txt");
     FileInputStream is = new FileInputStream(file);
     NewAwkParser parser = new NewAwkParser(new BufferedInputStream(is));
     parser.program();

     parser.printTokens(testToken);
     ((SimpleNode)jjtree.rootNode()).dump(">");

     }
     private void printTokens(String testToken) {
        System.out.println("Test: " + testToken);
     }
}
PARSER_END(NewAwkParser)
/*
    ==============================================================================================
    Lexer token deinifitions are defined in this section.
    ==============================================================================================
*/
SKIP :
{ <WHITESPACE: " ">
| <TAB: "\t">
| <NEW_LINE: "\n">
| <CARRIAGE_RETURN: "\r">
}
TOKEN : /* OPERATORS */
{ <PLUS: "+">
| <MINUS: "-">
| <MULTIPLICATION: "*">
| <DIVISION: "/">
| <MODULO: "%">
| <Zuweisung: "=">
| <EQUAL: "==">
| <NOT_EQUAL: "!=">
| <G_OR_EQUAL: ">=">
| <S_OR_EQUAL: "<=">
| <GREATER: ">">
| <SMALLER: "<">
| <Colon: ":">
| <ConditionalAnd: "&&">
| <ConditionalOr: "||">
| <ConditionalNot: "!">
| <Exponentiation: "^">
}
TOKEN : /* KEYWORDS */
{ <RETURN : "return">
}
TOKEN : /* SEPARATORS */
{ <KlammerAuf: "(">
| <KlammerZu: ")">
| <BlockAuf: "{">
| <BlockZu: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
}
TOKEN : /* BASIC */
{ <#LETTER: ["_","a"-"z","A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#EXPO: ["e","E"]("+"|"-")?(<DIGIT>)+>
| <DataType: ("int"|"double"|"char"|"boolean"|"String")>
| <ArrayType: <DataType> <LBRACKET> <RBRACKET>>
/*| <Type: <ArrayType> | <DataType> >*/
| <Apostrophe: "'">
| <BooleanConditionalAnd: <BooleanValue><ConditionalAnd><BooleanValue>
                          (<ConditionalAnd><BooleanValue> )* >
| <BooleanConditionalOr: <BooleanValue><ConditionalOr><BooleanValue>
                          (<ConditionalOr><BooleanValue> )* >
| <BooleanConditionalNot: (<ConditionalNot><BooleanValue>)>

}
TOKEN : /* LITERALS */
{ <CharLiteral: <Apostrophe> (<LETTER> | <DIGIT>) <Apostrophe>>
| <VOID: "void">
| <NullLiteral: "null">
| <BooleanValue: (<TRUE>|<FALSE>)>
| <#TRUE: "true">
| <#FALSE: "false">
| <IntegerLiteral: (<DIGIT>)+>
| <DoubleLiteral: ((<DIGIT>)+<DOT>(<DIGIT>)*(<EXPO>)?) | ((<DIGIT>)*<DOT> (<DIGIT>)+(<EXPO> )?)>
| <Bezeichner: <LETTER>(<DIGIT>|<LETTER>)*>
| <StringLiteral: "\"" <STRING_CONTENT> "\"">
| <#STRING_CONTENT: (<LETTER>|<DIGIT>)* >
}
/*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/
SimpleNode program()          : {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    fieldOrMethods()
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void fieldOrMethods()                 : {/*@bgen(jjtree) FieldOrMethods */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDORMETHODS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldOrMethods */
    try {
/*@egen*/
    (LOOKAHEAD(3) fieldDeclarationAndAssignment() | LOOKAHEAD(3) method())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void fieldDeclarationAndAssignment()                               : {/*@bgen(jjtree) FieldDeclarationAndAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDDECLARATIONANDASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldDeclarationAndAssignment */
    try {
/*@egen*/
    <DataType> assignment()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void assignment()            : {/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    <Bezeichner> <Zuweisung>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )
    <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void arrayAssignment()                 : {/*@bgen(jjtree) ArrayAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAssignment */
    try {
/*@egen*/
    <ArrayType>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void method()         : {/*@bgen(jjtree) Method */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Method */
    try {
/*@egen*/
    methodSignature()
    methodBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void methodSignature()                  : {/*@bgen(jjtree) MethodSignature */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodSignature */
    try {
/*@egen*/
    (<DataType> | <ArrayType> | <VOID>) <Bezeichner> <KlammerAuf> parameterList() <KlammerZu>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void parameterList()                : {/*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
    try {
/*@egen*/
    (<DataType> | <ArrayType>) <Bezeichner> [<COMMA> (<DataType> | <ArrayType>) <Bezeichner>]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void methodBody()             : {/*@bgen(jjtree) MethodBody */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodBody */
    try {
/*@egen*/
    <BlockAuf> (LOOKAHEAD(3) assignment()
                            | fieldDeclarationAndAssignment()
                            | returnStatement())+ <BlockZu>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void returnStatement()                  : {/*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    <RETURN>
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral>
    | <BooleanValue> | <StringLiteral> | <NullLiteral> )
    <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void comparision()             :
{/*@bgen(jjtree) Comparision */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Comparision */
    try {
/*@egen*/
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )
    (<EQUAL> | <NOT_EQUAL> | <SMALLER> | <S_OR_EQUAL> | <GREATER> | <G_OR_EQUAL>)
    (<Bezeichner> | <IntegerLiteral> | <DoubleLiteral> | <CharLiteral> | <BooleanValue> | <StringLiteral> | <NullLiteral> )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}