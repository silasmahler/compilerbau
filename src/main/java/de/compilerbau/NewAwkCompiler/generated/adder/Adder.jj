/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Adder.jj */
/*@egen*/options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
   FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Adder)

package de.compilerbau.NewAwkCompiler.generated.adder;

import java.util.*;
import java.io.*;

public class Adder/*@bgen(jjtree)*/implements AdderTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAdderState jjtree = new JJTAdderState();

/*@egen*/
 public static void main(String[] args) throws ParseException, FileNotFoundException, TokenMgrError {
     File file = new File(".\\src\\main\\java\\de\\compilerbau\\NewAwkCompiler\\NewAwkTestAddNumbers.txt");
     FileInputStream is = new FileInputStream(file);
     Adder parser = new Adder(new BufferedInputStream(is));
     parser.Start();

      ((SimpleNode)jjtree.rootNode()).dump(">");

     }
}
PARSER_END(Adder)
/*
    ==============================================================================================
    Lexer token deinifitions are defined in this section.
    ==============================================================================================
*/
SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < NUMBER : (["0"-"9"])+ > }
/*
    ==============================================================================================
    Parser Rules and AST generation are defined/handled in this section
    ==============================================================================================
*/

void Start()        :
{/*@bgen(jjtree) Adder */
  SimpleNode jjtn000 = new SimpleNode(JJTADDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Adder */
    try {
/*@egen*/
    <NUMBER>
    (
    (<PLUS> | <MINUS>)
    <NUMBER>
    )*
    <EOF>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}