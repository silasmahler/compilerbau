/* Generated By:JavaCC: Do not edit this line. NewAwkParserConstants.java */
package de.compilerbau.NewAwkCompiler.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NewAwkParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Whitespace = 1;
  /** RegularExpression Id. */
  int Tab = 2;
  /** RegularExpression Id. */
  int Newline = 3;
  /** RegularExpression Id. */
  int CarriageReturn = 4;
  /** RegularExpression Id. */
  int Alphabet = 5;
  /** RegularExpression Id. */
  int Digit = 6;
  /** RegularExpression Id. */
  int Expo = 7;
  /** RegularExpression Id. */
  int Datentyp = 8;
  /** RegularExpression Id. */
  int CharLiteral = 9;
  /** RegularExpression Id. */
  int ArrayType = 10;
  /** RegularExpression Id. */
  int Type = 11;
  /** RegularExpression Id. */
  int Schluesselwort = 12;
  /** RegularExpression Id. */
  int Void = 13;
  /** RegularExpression Id. */
  int Bezeichner = 14;
  /** RegularExpression Id. */
  int ConditionalAndExpression = 15;
  /** RegularExpression Id. */
  int ConditionalOrExpression = 16;
  /** RegularExpression Id. */
  int ConditionalNotExpression = 17;
  /** RegularExpression Id. */
  int KlammerAuf = 18;
  /** RegularExpression Id. */
  int KlammerZu = 19;
  /** RegularExpression Id. */
  int BlockAuf = 20;
  /** RegularExpression Id. */
  int BlockZu = 21;
  /** RegularExpression Id. */
  int IntegerLiteral = 22;
  /** RegularExpression Id. */
  int DoubleLiteral = 23;
  /** RegularExpression Id. */
  int PlusSymbol = 24;
  /** RegularExpression Id. */
  int MinusSymbol = 25;
  /** RegularExpression Id. */
  int Multiplikation = 26;
  /** RegularExpression Id. */
  int Division = 27;
  /** RegularExpression Id. */
  int ModuloOperator = 28;
  /** RegularExpression Id. */
  int Exponentiation = 29;
  /** RegularExpression Id. */
  int Boolean = 30;
  /** RegularExpression Id. */
  int Equal = 31;
  /** RegularExpression Id. */
  int NotEqual = 32;
  /** RegularExpression Id. */
  int GreaterOrEqual = 33;
  /** RegularExpression Id. */
  int SmallerOrEqual = 34;
  /** RegularExpression Id. */
  int Greater = 35;
  /** RegularExpression Id. */
  int Smaller = 36;
  /** RegularExpression Id. */
  int Semicolon = 37;
  /** RegularExpression Id. */
  int Zuweisung = 38;
  /** RegularExpression Id. */
  int NullLiteral = 39;
  /** RegularExpression Id. */
  int Commata = 40;
  /** RegularExpression Id. */
  int Apostrophe = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<Alphabet>",
    "<Digit>",
    "<Expo>",
    "<Datentyp>",
    "<CharLiteral>",
    "<ArrayType>",
    "<Type>",
    "<Schluesselwort>",
    "\"void\"",
    "<Bezeichner>",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<IntegerLiteral>",
    "<DoubleLiteral>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "<Boolean>",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\";\"",
    "\"=\"",
    "\"null\"",
    "\",\"",
    "\"\\\'\"",
    "\"()\"",
  };

}
