/* Generated By:JJTree&JavaCC: Do not edit this line. NewAwkParserConstants.java */
package de.compilerbau.NewAwkCompiler.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NewAwkParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int TAB = 2;
  /** RegularExpression Id. */
  int NEW_LINE = 3;
  /** RegularExpression Id. */
  int CARRIAGE_RETURN = 4;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLICATION = 7;
  /** RegularExpression Id. */
  int DIVISION = 8;
  /** RegularExpression Id. */
  int MODULO = 9;
  /** RegularExpression Id. */
  int Zuweisung = 10;
  /** RegularExpression Id. */
  int EQUAL = 11;
  /** RegularExpression Id. */
  int NOT_EQUAL = 12;
  /** RegularExpression Id. */
  int G_OR_EQUAL = 13;
  /** RegularExpression Id. */
  int S_OR_EQUAL = 14;
  /** RegularExpression Id. */
  int GREATER = 15;
  /** RegularExpression Id. */
  int SMALLER = 16;
  /** RegularExpression Id. */
  int Colon = 17;
  /** RegularExpression Id. */
  int ConditionalAnd = 18;
  /** RegularExpression Id. */
  int ConditionalOr = 19;
  /** RegularExpression Id. */
  int ConditionalNot = 20;
  /** RegularExpression Id. */
  int Exponentiation = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int KlammerAuf = 23;
  /** RegularExpression Id. */
  int KlammerZu = 24;
  /** RegularExpression Id. */
  int BlockAuf = 25;
  /** RegularExpression Id. */
  int BlockZu = 26;
  /** RegularExpression Id. */
  int LBRACKET = 27;
  /** RegularExpression Id. */
  int RBRACKET = 28;
  /** RegularExpression Id. */
  int SEMICOLON = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int DOT = 31;
  /** RegularExpression Id. */
  int LETTER = 32;
  /** RegularExpression Id. */
  int DIGIT = 33;
  /** RegularExpression Id. */
  int EXPO = 34;
  /** RegularExpression Id. */
  int DataType = 35;
  /** RegularExpression Id. */
  int ArrayType = 36;
  /** RegularExpression Id. */
  int Apostrophe = 37;
  /** RegularExpression Id. */
  int BooleanConditionalAnd = 38;
  /** RegularExpression Id. */
  int BooleanConditionalOr = 39;
  /** RegularExpression Id. */
  int BooleanConditionalNot = 40;
  /** RegularExpression Id. */
  int CharLiteral = 41;
  /** RegularExpression Id. */
  int VOID = 42;
  /** RegularExpression Id. */
  int NullLiteral = 43;
  /** RegularExpression Id. */
  int BooleanValue = 44;
  /** RegularExpression Id. */
  int TRUE = 45;
  /** RegularExpression Id. */
  int FALSE = 46;
  /** RegularExpression Id. */
  int IntegerLiteral = 47;
  /** RegularExpression Id. */
  int DoubleLiteral = 48;
  /** RegularExpression Id. */
  int Bezeichner = 49;
  /** RegularExpression Id. */
  int StringLiteral = 50;
  /** RegularExpression Id. */
  int STRING_CONTENT = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\":\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"^\"",
    "\"return\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<LETTER>",
    "<DIGIT>",
    "<EXPO>",
    "<DataType>",
    "<ArrayType>",
    "\"\\\'\"",
    "<BooleanConditionalAnd>",
    "<BooleanConditionalOr>",
    "<BooleanConditionalNot>",
    "<CharLiteral>",
    "\"void\"",
    "\"null\"",
    "<BooleanValue>",
    "\"true\"",
    "\"false\"",
    "<IntegerLiteral>",
    "<DoubleLiteral>",
    "<Bezeichner>",
    "<StringLiteral>",
    "<STRING_CONTENT>",
  };

}
