/* Generated By:JavaCC: Do not edit this line. NewAwkParserConstants.java */
package de.compilerbau.NewAwkCompiler.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NewAwkParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Whitespace = 1;
  /** RegularExpression Id. */
  int Tab = 2;
  /** RegularExpression Id. */
  int Newline = 3;
  /** RegularExpression Id. */
  int CarriageReturn = 4;
  /** RegularExpression Id. */
  int Alphabet = 5;
  /** RegularExpression Id. */
  int Digit = 6;
  /** RegularExpression Id. */
  int Expo = 7;
  /** RegularExpression Id. */
  int Bezeichner = 8;
  /** RegularExpression Id. */
  int Datentyp = 9;
  /** RegularExpression Id. */
  int Schluesselwort = 10;
  /** RegularExpression Id. */
  int TypKonverter = 11;
  /** RegularExpression Id. */
  int KlammerAuf = 12;
  /** RegularExpression Id. */
  int KlammerZu = 13;
  /** RegularExpression Id. */
  int IntegerLiteral = 14;
  /** RegularExpression Id. */
  int DoubleLiteral = 15;
  /** RegularExpression Id. */
  int PlusSymbol = 16;
  /** RegularExpression Id. */
  int MinusSymbol = 17;
  /** RegularExpression Id. */
  int Multiplikation = 18;
  /** RegularExpression Id. */
  int Division = 19;
  /** RegularExpression Id. */
  int ModuloOperator = 20;
  /** RegularExpression Id. */
  int Exponentiation = 21;
  /** RegularExpression Id. */
  int Boolean = 22;
  /** RegularExpression Id. */
  int Equal = 23;
  /** RegularExpression Id. */
  int NotEqual = 24;
  /** RegularExpression Id. */
  int GreaterOrEqual = 25;
  /** RegularExpression Id. */
  int SmallerOrEqual = 26;
  /** RegularExpression Id. */
  int Greater = 27;
  /** RegularExpression Id. */
  int Smaller = 28;
  /** RegularExpression Id. */
  int Semicolon = 29;
  /** RegularExpression Id. */
  int Zuweisung = 30;
  /** RegularExpression Id. */
  int NAME = 31;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<Alphabet>",
    "<Digit>",
    "<Expo>",
    "<Bezeichner>",
    "<Datentyp>",
    "<Schluesselwort>",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "<IntegerLiteral>",
    "<DoubleLiteral>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "<Boolean>",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\";\"",
    "\"=\"",
    "<NAME>",
  };

}
