/* Generated By:JavaCC: Do not edit this line. NewAwkParserConstants.java */
package de.compilerbau.NewAwkCompiler.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NewAwkParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int TAB = 2;
  /** RegularExpression Id. */
  int NEW_LINE = 3;
  /** RegularExpression Id. */
  int CARRIAGE_RETURN = 4;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLICATION = 7;
  /** RegularExpression Id. */
  int DIVISION = 8;
  /** RegularExpression Id. */
  int MODULO = 9;
  /** RegularExpression Id. */
  int EQUAL = 10;
  /** RegularExpression Id. */
  int NOT_EQUAL = 11;
  /** RegularExpression Id. */
  int G_OR_EQUAL = 12;
  /** RegularExpression Id. */
  int S_OR_EQUAL = 13;
  /** RegularExpression Id. */
  int GREATER = 14;
  /** RegularExpression Id. */
  int SMALLER = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int DO = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int SWITCH = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int BREAK = 24;
  /** RegularExpression Id. */
  int LETTER = 25;
  /** RegularExpression Id. */
  int DIGIT = 26;
  /** RegularExpression Id. */
  int EXPO = 27;
  /** RegularExpression Id. */
  int Type = 28;
  /** RegularExpression Id. */
  int ArrayType = 29;
  /** RegularExpression Id. */
  int Datentyp = 30;
  /** RegularExpression Id. */
  int Exponentiation = 31;
  /** RegularExpression Id. */
  int Zuweisung = 32;
  /** RegularExpression Id. */
  int Commata = 33;
  /** RegularExpression Id. */
  int Apostrophe = 34;
  /** RegularExpression Id. */
  int Colon = 35;
  /** RegularExpression Id. */
  int SEMICOL = 36;
  /** RegularExpression Id. */
  int CharLiteral = 37;
  /** RegularExpression Id. */
  int IntegerLiteral = 38;
  /** RegularExpression Id. */
  int DoubleLiteral = 39;
  /** RegularExpression Id. */
  int VOID = 40;
  /** RegularExpression Id. */
  int NullLiteral = 41;
  /** RegularExpression Id. */
  int Bezeichner = 42;
  /** RegularExpression Id. */
  int StringLiteral = 43;
  /** RegularExpression Id. */
  int STRING_CONTENT = 44;
  /** RegularExpression Id. */
  int BooleanExpression = 45;
  /** RegularExpression Id. */
  int TRUE = 46;
  /** RegularExpression Id. */
  int FALSE = 47;
  /** RegularExpression Id. */
  int ConditionalAndExpression = 48;
  /** RegularExpression Id. */
  int ConditionalOrExpression = 49;
  /** RegularExpression Id. */
  int ConditionalNotExpression = 50;
  /** RegularExpression Id. */
  int KlammerAuf = 51;
  /** RegularExpression Id. */
  int KlammerZu = 52;
  /** RegularExpression Id. */
  int BlockAuf = 53;
  /** RegularExpression Id. */
  int BlockZu = 54;
  /** RegularExpression Id. */
  int BracketOpen = 55;
  /** RegularExpression Id. */
  int BracketClose = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"switch\"",
    "\"case\"",
    "\"return\"",
    "\"break\"",
    "<LETTER>",
    "<DIGIT>",
    "<EXPO>",
    "<Type>",
    "<ArrayType>",
    "<Datentyp>",
    "\"^\"",
    "\"=\"",
    "\",\"",
    "\"\\\'\"",
    "\":\"",
    "\";\"",
    "<CharLiteral>",
    "<IntegerLiteral>",
    "<DoubleLiteral>",
    "\"void\"",
    "\"null\"",
    "<Bezeichner>",
    "<StringLiteral>",
    "<STRING_CONTENT>",
    "<BooleanExpression>",
    "\"true\"",
    "\"false\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"()\"",
  };

}
